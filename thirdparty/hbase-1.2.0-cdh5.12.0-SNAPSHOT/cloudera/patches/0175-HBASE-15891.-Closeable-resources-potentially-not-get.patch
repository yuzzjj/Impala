From fe28fe84928038d0b96e67a834699058b5924aba Mon Sep 17 00:00:00 2001
From: Sean Mackrory <mackrorysd@apache.org>
Date: Wed, 25 May 2016 07:20:14 -0600
Subject: [PATCH 175/308] HBASE-15891. Closeable resources potentially not
 getting closed if exception is thrown.

Reason: Bug
Author: Sean Mackrory
Ref: CDH-40539

Change-Id: I8e568814f93cc5317c1b794bfb7e6146f0e26d79
Signed-off-by: stack <stack@apache.org>
---
 .../org/apache/hadoop/hbase/zookeeper/ZKUtil.java  |   36 ++++++++++----------
 .../hadoop/hbase/util/CoprocessorClassLoader.java  |    6 ++--
 .../org/apache/hadoop/hbase/http/log/LogLevel.java |   14 ++++----
 .../apache/hadoop/hbase/mapreduce/JarFinder.java   |    5 +--
 4 files changed, 32 insertions(+), 29 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKUtil.java
index ad43253..2dfc8d8 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKUtil.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKUtil.java
@@ -1909,27 +1909,27 @@ public class ZKUtil {
     int port = sp.length > 1 ? Integer.parseInt(sp[1])
         : HConstants.DEFAULT_ZOOKEPER_CLIENT_PORT;
 
-    Socket socket = new Socket();
     InetSocketAddress sockAddr = new InetSocketAddress(host, port);
-    socket.connect(sockAddr, timeout);
-
-    socket.setSoTimeout(timeout);
-    PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
-    BufferedReader in = new BufferedReader(new InputStreamReader(
-      socket.getInputStream()));
-    out.println("stat");
-    out.flush();
-    ArrayList<String> res = new ArrayList<String>();
-    while (true) {
-      String line = in.readLine();
-      if (line != null) {
-        res.add(line);
-      } else {
-        break;
+    try (Socket socket = new Socket()) {
+      socket.connect(sockAddr, timeout);
+
+      socket.setSoTimeout(timeout);
+      PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
+      BufferedReader in = new BufferedReader(new InputStreamReader(
+        socket.getInputStream()));
+      out.println("stat");
+      out.flush();
+      ArrayList<String> res = new ArrayList<String>();
+      while (true) {
+        String line = in.readLine();
+        if (line != null) {
+          res.add(line);
+        } else {
+          break;
+        }
       }
+      return res.toArray(new String[res.size()]);
     }
-    socket.close();
-    return res.toArray(new String[res.size()]);
   }
 
   private static void logRetrievedMsg(final ZooKeeperWatcher zkw,
diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/util/CoprocessorClassLoader.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/util/CoprocessorClassLoader.java
index b9c9c97..b8d045e 100644
--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/util/CoprocessorClassLoader.java
+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/util/CoprocessorClassLoader.java
@@ -190,8 +190,10 @@ public class CoprocessorClassLoader extends ClassLoaderBase {
         if (m.matches()) {
           File file = new File(parentDirStr, "." + pathPrefix + "."
             + path.getName() + "." + System.currentTimeMillis() + "." + m.group(1));
-          IOUtils.copyBytes(jarFile.getInputStream(entry),
-            new FileOutputStream(file), conf, true);
+          try (FileOutputStream outStream = new FileOutputStream(file)) {
+            IOUtils.copyBytes(jarFile.getInputStream(entry),
+              outStream, conf, true);
+          }
           file.deleteOnExit();
           addURL(file.toURI().toURL());
         }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/http/log/LogLevel.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/http/log/LogLevel.java
index 7701a25..1a95c70 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/http/log/LogLevel.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/http/log/LogLevel.java
@@ -72,14 +72,14 @@ public class LogLevel {
       System.out.println("Connecting to " + url);
       URLConnection connection = url.openConnection();
       connection.connect();
-
-      BufferedReader in = new BufferedReader(new InputStreamReader(
-          connection.getInputStream()));
-      for(String line; (line = in.readLine()) != null; )
-        if (line.startsWith(MARKER)) {
-          System.out.println(TAG.matcher(line).replaceAll(""));
+      try (BufferedReader in = new BufferedReader(new InputStreamReader(
+               connection.getInputStream()))) {
+        for(String line; (line = in.readLine()) != null; ) {
+          if (line.startsWith(MARKER)) {
+            System.out.println(TAG.matcher(line).replaceAll(""));
+          }
         }
-      in.close();
+      }
     } catch (IOException ioe) {
       System.err.println("" + ioe);
     }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/JarFinder.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/JarFinder.java
index dfbe648..cf334db 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/JarFinder.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/JarFinder.java
@@ -124,8 +124,9 @@ public class JarFinder {
                                                    jarDir));
       }
     }
-    JarOutputStream zos = new JarOutputStream(new FileOutputStream(jarFile));
-    jarDir(dir, "", zos);
+    try (JarOutputStream zos = new JarOutputStream(new FileOutputStream(jarFile))) {
+      jarDir(dir, "", zos);
+    }
   }
 
   /**
-- 
1.7.9.5

