From 8ebf5156572292862fa4310f15e2d72f52e2e724 Mon Sep 17 00:00:00 2001
From: tedyu <yuzhihong@gmail.com>
Date: Fri, 23 Sep 2016 05:08:19 -0700
Subject: [PATCH 357/362] HBASE-16423 Add re-compare option to
 VerifyReplication to avoid occasional inconsistent
 rows (Jianwei Cui)

(cherry picked from commit b503843bae2b5baa6e5c6ef9dad3395c9caa2e9f)

Change-Id: I06126bc161e08c22cc376b06dcdbc93ff8363bef
Reason:    Supportability
Author:    Jianwei Cui
Ref:       CDH-54823
---
 .../mapreduce/replication/VerifyReplication.java   |   38 +++++++++++++++++++-
 1 file changed, 37 insertions(+), 1 deletion(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/replication/VerifyReplication.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/replication/VerifyReplication.java
index 82958a7..4668c7d 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/replication/VerifyReplication.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/replication/VerifyReplication.java
@@ -29,6 +29,7 @@ import org.apache.hadoop.hbase.client.HConnectable;
 import org.apache.hadoop.hbase.client.HConnection;
 import org.apache.hadoop.hbase.client.HConnectionManager;
 import org.apache.hadoop.hbase.client.HTable;
+import org.apache.hadoop.hbase.client.Get;
 import org.apache.hadoop.hbase.client.Put;
 import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.ResultScanner;
@@ -46,6 +47,7 @@ import org.apache.hadoop.hbase.replication.ReplicationPeerConfig;
 import org.apache.hadoop.hbase.replication.ReplicationPeers;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.Pair;
+import org.apache.hadoop.hbase.util.Threads;
 import org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher;
 import org.apache.hadoop.mapreduce.Job;
 import org.apache.hadoop.mapreduce.lib.output.NullOutputFormat;
@@ -76,6 +78,7 @@ public class VerifyReplication extends Configured implements Tool {
   static String families = null;
   static String delimiter = "";
   static String peerId = null;
+  static int sleepMsBeforeReCompare = 0;
 
   /**
    * Map-only comparator for 2 tables
@@ -86,9 +89,11 @@ public class VerifyReplication extends Configured implements Tool {
     public static enum Counters {
       GOODROWS, BADROWS, ONLY_IN_SOURCE_TABLE_ROWS, ONLY_IN_PEER_TABLE_ROWS, CONTENT_DIFFERENT_ROWS}
 
+    private Table sourceTable;
     private ResultScanner replicatedScanner;
     private Result currentCompareRowInPeerTable;
     private Table replicatedTable;
+    private int sleepMsBeforeReCompare;
 
     /**
      * Map method that compares every scanned row with the equivalent from
@@ -104,6 +109,7 @@ public class VerifyReplication extends Configured implements Tool {
         throws IOException {
       if (replicatedScanner == null) {
         Configuration conf = context.getConfiguration();
+        sleepMsBeforeReCompare = conf.getInt(NAME +".sleepMsBeforeReCompare", 0);
         final Scan scan = new Scan();
         scan.setCaching(conf.getInt(TableInputFormat.SCAN_CACHEDROWS, 1));
         long startTime = conf.getLong(NAME + ".startTime", 0);
@@ -121,6 +127,7 @@ public class VerifyReplication extends Configured implements Tool {
         if (versions >= 0) {
           scan.setMaxVersions(versions);
         }
+        sourceTable = new HTable(conf, tableName);
 
         final TableSplit tableSplit = (TableSplit)(context.getInputSplit());
         HConnectionManager.execute(new HConnectable<Void>(conf) {
@@ -172,6 +179,18 @@ public class VerifyReplication extends Configured implements Tool {
     }
 
     private void logFailRowAndIncreaseCounter(Context context, Counters counter, Result row) {
+      if (sleepMsBeforeReCompare > 0) {
+        Threads.sleep(sleepMsBeforeReCompare);
+        try {
+          Result sourceResult = sourceTable.get(new Get(row.getRow()));
+          Result replicatedResult = replicatedTable.get(new Get(row.getRow()));
+          Result.compareResults(sourceResult, replicatedResult);
+          return;
+        } catch (Exception e) {
+          LOG.error("recompare fail after sleep, rowkey=" + delimiter +
+              Bytes.toString(row.getRow()) + delimiter);
+        }
+      }
       context.getCounter(counter).increment(1);
       context.getCounter(Counters.BADROWS).increment(1);
       LOG.error(counter.toString() + ", rowkey=" + delimiter + Bytes.toStringBinary(row.getRow()) +
@@ -194,12 +213,20 @@ public class VerifyReplication extends Configured implements Tool {
           replicatedScanner = null;
         }
       }
+      if (sourceTable != null) {
+        TableName tableName = replicatedTable.getName();
+        try {
+          sourceTable.close();
+        } catch (IOException ioe) {
+          LOG.warn("Exception closing source table: " + tableName, ioe);
+        }
+      }
       if (replicatedTable != null) {
         TableName tableName = replicatedTable.getName();
         try {
           replicatedTable.close();
         } catch (IOException ioe) {
-          LOG.warn("Exception closing " + tableName, ioe);
+          LOG.warn("Exception closing replicated table: " + tableName, ioe);
         }
       }
     }
@@ -259,6 +286,7 @@ public class VerifyReplication extends Configured implements Tool {
     conf.set(NAME+".tableName", tableName);
     conf.setLong(NAME+".startTime", startTime);
     conf.setLong(NAME+".endTime", endTime);
+    conf.setInt(NAME +".sleepMsBeforeReCompare", sleepMsBeforeReCompare);
     if (families != null) {
       conf.set(NAME+".families", families);
     }
@@ -349,6 +377,12 @@ public class VerifyReplication extends Configured implements Tool {
           continue;
         }
 
+        final String sleepToReCompareKey = "--recomparesleep=";
+        if (cmd.startsWith(sleepToReCompareKey)) {
+          sleepMsBeforeReCompare = Integer.parseInt(cmd.substring(sleepToReCompareKey.length()));
+          continue;
+        }
+
         if (i == args.length-2) {
           peerId = cmd;
         }
@@ -382,6 +416,8 @@ public class VerifyReplication extends Configured implements Tool {
     System.err.println(" versions     number of cell versions to verify");
     System.err.println(" families     comma-separated list of families to copy");
     System.err.println(" delimiter    the delimiter used in display around rowkey");
+    System.err.println(" recomparesleep   milliseconds to sleep before recompare row, " +
+        "default value is 0 which disables the recompare.");
     System.err.println();
     System.err.println("Args:");
     System.err.println(" peerid       Id of the peer used for verification, must match the one given for replication");
-- 
1.7.9.5

