From 3822761b238334faad08dc1d79b79be7c7a95097 Mon Sep 17 00:00:00 2001
From: Sean Busbey <busbey@cloudera.com>
Date: Fri, 31 Mar 2017 10:11:51 -0500
Subject: [PATCH 319/362] CLOUDERA-BUILD cleanup and improvements on invoking
 compatibility checker.

Change-Id: I7362b650531e75babcb8198b3390269eff792d1f
Ref: CDH-50453
---
 dev-support/checkcompatibility.py |   50 +++++++++++++++++++++++++++----------
 1 file changed, 37 insertions(+), 13 deletions(-)

diff --git a/dev-support/checkcompatibility.py b/dev-support/checkcompatibility.py
index 401fbc7..80a34e1 100755
--- a/dev-support/checkcompatibility.py
+++ b/dev-support/checkcompatibility.py
@@ -70,7 +70,7 @@ def check_output(*popenargs, **kwargs):
 def get_repo_dir():
   """ Return the path to the top of the repo. """
   dirname, _ = os.path.split(os.path.abspath(__file__))
-  logging.info("Repo dir is  %s%s", dirname, "../")
+  logging.debug("Repo dir is  %s/%s", dirname, "../")
   return os.path.join(dirname, "../")
 
 def get_scratch_dir():
@@ -123,13 +123,14 @@ def get_repo_name():
     remote = remote[:-4]
   return remote
 
-def build_tree(java_path):
+def build_tree(java_path, verbose):
   """ Run the Java build within 'path'. """
   logging.info("Building in %s ", java_path)
-  subprocess.check_call(["mvn", "-DskipTests", "-Dmaven.javadoc.skip=true",
-                         "package"],
-                        cwd=java_path)
-
+  mvn_cmd = ["mvn", "--batch-mode", "-DskipTests", "-Dmaven.javadoc.skip=true"]
+  if not verbose:
+    mvn_cmd.append("--quiet")
+  mvn_cmd.append("package")
+  subprocess.check_call(mvn_cmd, cwd=java_path)
 
 def checkout_java_acc(force):
   """
@@ -146,7 +147,7 @@ def checkout_java_acc(force):
 
   logging.info("Downloading Java ACC...")
 
-  url = "https://github.com/lvc/japi-compliance-checker/archive/1.8.tar.gz"
+  url = "https://github.com/lvc/japi-compliance-checker/archive/2.1.tar.gz"
   scratch_dir = get_scratch_dir()
   path = os.path.join(scratch_dir, os.path.basename(url))
   jacc = urllib2.urlopen(url)
@@ -156,7 +157,7 @@ def checkout_java_acc(force):
   subprocess.check_call(["tar", "xzf", path],
                         cwd=scratch_dir)
 
-  shutil.move(os.path.join(scratch_dir, "japi-compliance-checker-1.8"),
+  shutil.move(os.path.join(scratch_dir, "japi-compliance-checker-2.1"),
               os.path.join(acc_dir))
 
 
@@ -178,7 +179,7 @@ def write_xml_file(path, version, jars):
       f.write(j + "\n")
     f.write("</archives>")
 
-def run_java_acc(src_name, src_jars, dst_name, dst_jars, annotations):
+def run_java_acc(src_name, src_jars, dst_name, dst_jars, annotations, skip_annotations):
   """ Run the compliance checker to compare 'src' and 'dst'. """
   logging.info("Will check compatibility between original jars:\n\t%s\n" +
                "and new jars:\n\t%s",
@@ -208,6 +209,13 @@ def run_java_acc(src_name, src_jars, dst_name, dst_jars, annotations):
         print >>f, ann
     args += ["-annotations-list", annotations_path]
 
+  if skip_annotations is not None:
+    skip_annotations_path = os.path.join(get_scratch_dir(), "skip_annotations.txt")
+    with file(skip_annotations_path, "w") as f:
+      for a in skip_annotations:
+        print >>f, a
+    args += ["-skip-annotations-list", skip_annotations_path]
+
   subprocess.check_call(args)
 
 def filter_jars(jars, include_filters, exclude_filters):
@@ -269,12 +277,21 @@ def main():
                       help="Fully-qualified Java annotation. " +
                       "Java ACC will only check compatibility of " +
                       "annotated classes. Can be specified multiple times.")
+  parser.add_argument("--skip-annotation",
+                      action="append",
+                      dest="skip_annotations",
+                      help="Fully-qualified Java annotation. " +
+                      "Java ACC will not check compatibility of " +
+                      "these annotated classes. Can be specified multiple times.")
   parser.add_argument("--skip-clean",
                       action="store_true",
                       help="Skip cleaning the scratch directory.")
   parser.add_argument("--skip-build",
                       action="store_true",
                       help="Skip building the projects.")
+  parser.add_argument("--verbose",
+                      action="store_true",
+                      help="more output")
   parser.add_argument("src_rev", nargs=1, help="Source revision.")
   parser.add_argument("dst_rev", nargs="?", default="HEAD",
                       help="Destination revision. " +
@@ -313,6 +330,12 @@ def main():
     for a in annotations:
       logging.info("\t%s", a)
 
+  skip_annotations = args.skip_annotations
+  if skip_annotations is not None:
+    logging.info("Skipping classes with %d annotation(s):", len(skip_annotations))
+    for a in skip_annotations:
+      logging.info("\t%s", a)
+
   # Download deps.
   checkout_java_acc(args.force_download)
 
@@ -333,8 +356,8 @@ def main():
   if args.skip_build:
     logging.info("Skipping the build")
   else:
-    build_tree(src_dir)
-    build_tree(dst_dir)
+    build_tree(src_dir, args.verbose)
+    build_tree(dst_dir, args.verbose)
 
   # Find the JARs.
   src_jars = find_jars(src_dir)
@@ -349,8 +372,9 @@ def main():
     sys.exit(1)
 
   run_java_acc(src_rev, src_jars,
-               dst_rev, dst_jars, annotations)
+               dst_rev, dst_jars,
+               annotations, skip_annotations)
 
 
 if __name__ == "__main__":
-  main()
\ No newline at end of file
+  main()
-- 
1.7.9.5

