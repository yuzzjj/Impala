From 93607bb6ed61f92936f8cfce3fd9f035046d9a7f Mon Sep 17 00:00:00 2001
From: tedyu <yuzhihong@gmail.com>
Date: Thu, 2 Mar 2017 11:33:36 -0800
Subject: [PATCH 337/362] HBASE-17710 HBase in standalone mode creates
 directories with 777 permission

(cherry picked from commit 88f909cf1f9300c2e2b5d99b7300d74c0b0d7916)

Change-Id: I13223ace5e9e4ca7730a20f817eedec6839d9d9c
Author: tedyu
Reason: Bug
Ref: CDH-53427
---
 .../hbase/regionserver/HRegionFileSystem.java      |   12 ++++++++++--
 .../hadoop/hbase/regionserver/StoreFile.java       |    4 +++-
 .../java/org/apache/hadoop/hbase/util/FSUtils.java |   14 ++++++++++++++
 3 files changed, 27 insertions(+), 3 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionFileSystem.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionFileSystem.java
index 19e8c45..bb62785 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionFileSystem.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionFileSystem.java
@@ -667,6 +667,14 @@ public class HRegionFileSystem {
     }
   }
 
+  static boolean mkdirs(FileSystem fs, Configuration conf, Path dir) throws IOException {
+    if (FSUtils.isDistributedFileSystem(fs) ||
+        !conf.getBoolean(HConstants.ENABLE_DATA_FILE_UMASK, false)) {
+      return fs.mkdirs(dir);
+    }
+    FsPermission perms = FSUtils.getFilePermissions(fs, conf, HConstants.DATA_FILE_UMASK_KEY);
+    return fs.mkdirs(dir, perms);
+  }
   /**
    * Create the region merges directory.
    * @throws IOException If merges dir already exists or we fail to create it.
@@ -682,7 +690,7 @@ public class HRegionFileSystem {
             + " before creating them again.");
       }
     }
-    if (!fs.mkdirs(mergesdir))
+    if (!mkdirs(fs, conf, mergesdir))
       throw new IOException("Failed create of " + mergesdir);
   }
 
@@ -974,7 +982,7 @@ public class HRegionFileSystem {
     IOException lastIOE = null;
     do {
       try {
-        return fs.mkdirs(dir);
+        return mkdirs(fs, conf, dir);
       } catch (IOException ioe) {
         lastIOE = ioe;
         if (fs.exists(dir)) return true; // directory is present
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java
index 1f347ff..4bf7161 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java
@@ -676,7 +676,9 @@ public class StoreFile {
       }
 
       if (!fs.exists(dir)) {
-        fs.mkdirs(dir);
+        // Handle permission for non-HDFS filesystem properly
+        // See HBASE-17710
+        HRegionFileSystem.mkdirs(fs, conf, dir);
       }
 
       if (filePath == null) {
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSUtils.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSUtils.java
index ebd8dd9..6df35b2 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSUtils.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSUtils.java
@@ -196,6 +196,20 @@ public abstract class FSUtils {
   }
 
   /**
+   * @return True is <code>fs</code> is instance of DistributedFileSystem
+   * @throws IOException
+   */
+  public static boolean isDistributedFileSystem(final FileSystem fs) throws IOException {
+    FileSystem fileSystem = fs;
+    // If passed an instance of HFileSystem, it fails instanceof DistributedFileSystem.
+    // Check its backing fs for dfs-ness.
+    if (fs instanceof HFileSystem) {
+      fileSystem = ((HFileSystem)fs).getBackingFs();
+    }
+    return fileSystem instanceof DistributedFileSystem;
+  }
+ 
+  /**
    * Compare of path component. Does not consider schema; i.e. if schemas
    * different but <code>path</code> starts with <code>rootPath</code>,
    * then the function returns true
-- 
1.7.9.5

