From 376c706fc76370a0a76d71f3a4dafe1c9f556e53 Mon Sep 17 00:00:00 2001
From: Michael Stack <stack@apache.org>
Date: Thu, 9 Feb 2017 23:09:09 -0800
Subject: [PATCH 242/362] Address review comments by Sean and Appy

Adds a new type to hold hostname and port. It is called
Address. It is a facade over Guava's HostAndPort. Replace
all instances of HostAndPort with Address. In particular,
those places where HostAndPort was part of the rsgroup
public API.

Fix licenses. Add audience annotations.

Cleanup and note concurrency expectation on a few core classes.

M hbase-client/src/main/java/org/apache/hadoop/hbase/ServerName.java
 Host the hostname and port in an instance of the new type Address.
 Add a bunch of deprecation of exotic string parses that should never
 have been public.

M hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdmin.java
 Make this an Interface rather than abstract class. Creation was a
 static internal method that only chose one type.... Let it be free
 as a true Interface instead.

Change-Id: I0f18efb7b12a89cb07be712438415c4b71395c5c
---
 .../java/org/apache/hadoop/hbase/ServerName.java   |  113 +++++++++++-------
 .../apache/hadoop/hbase/protobuf/ProtobufUtil.java |    8 +-
 .../hadoop/hbase/client/TestAsyncProcess.java      |    6 +-
 .../apache/hadoop/hbase/rsgroup/RSGroupInfo.java   |   24 ++--
 .../java/org/apache/hadoop/hbase/util/Address.java |   81 +++++++++++++
 .../hbase/rsgroup/IntegrationTestRSGroup.java      |   12 +-
 hbase-rsgroup/pom.xml                              |   24 +---
 .../apache/hadoop/hbase/rsgroup/RSGroupAdmin.java  |   40 +++----
 .../hadoop/hbase/rsgroup/RSGroupAdminClient.java   |   47 ++++----
 .../hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java |   88 +++++---------
 .../hadoop/hbase/rsgroup/RSGroupAdminServer.java   |  122 +++++++++++---------
 .../hbase/rsgroup/RSGroupBasedLoadBalancer.java    |   33 ++----
 .../hadoop/hbase/rsgroup/RSGroupInfoManager.java   |   13 +--
 .../hbase/rsgroup/RSGroupInfoManagerImpl.java      |   56 ++++-----
 .../apache/hadoop/hbase/rsgroup/RSGroupSerDe.java  |    6 +-
 .../hadoop/hbase/rsgroup/RSGroupableBalancer.java  |   10 +-
 .../balancer/TestRSGroupBasedLoadBalancer.java     |   26 ++---
 .../apache/hadoop/hbase/rsgroup/TestRSGroups.java  |   38 +++---
 .../hadoop/hbase/rsgroup/TestRSGroupsBase.java     |   68 +++++------
 .../hbase/rsgroup/TestRSGroupsOfflineMode.java     |   64 +++++-----
 .../hbase/rsgroup/VerifyingRSGroupAdminClient.java |   14 +--
 .../coprocessor/BaseMasterAndRegionObserver.java   |    7 +-
 .../hbase/coprocessor/BaseMasterObserver.java      |    7 +-
 .../hadoop/hbase/coprocessor/MasterObserver.java   |    7 +-
 .../hadoop/hbase/master/AssignmentManager.java     |    2 +-
 .../apache/hadoop/hbase/master/LoadBalancer.java   |    7 +-
 .../hadoop/hbase/master/MasterCoprocessorHost.java |    7 +-
 .../hadoop/hbase/regionserver/HRegionServer.java   |    2 +-
 .../hbase/security/access/AccessController.java    |    5 +-
 .../org/apache/hadoop/hbase/TestServerName.java    |   15 +--
 .../hbase/coprocessor/TestMasterObserver.java      |    6 +-
 .../master/balancer/TestRegionLocationFinder.java  |    5 +-
 hbase-shell/src/main/ruby/hbase/rsgroup_admin.rb   |    9 +-
 .../main/ruby/shell/commands/balance_rsgroup.rb    |    3 -
 .../src/main/ruby/shell/commands/get_rsgroup.rb    |    7 +-
 .../main/ruby/shell/commands/get_server_rsgroup.rb |    5 +-
 .../main/ruby/shell/commands/get_table_rsgroup.rb  |    3 -
 .../src/main/ruby/shell/commands/list_rsgroups.rb  |    5 +-
 .../ruby/shell/commands/move_rsgroup_servers.rb    |    3 -
 .../ruby/shell/commands/move_rsgroup_tables.rb     |    3 -
 .../src/main/ruby/shell/commands/remove_rsgroup.rb |    3 -
 .../src/test/ruby/shell/rsgroup_shell_test.rb      |    2 +-
 42 files changed, 495 insertions(+), 511 deletions(-)
 create mode 100644 hbase-common/src/main/java/org/apache/hadoop/hbase/util/Address.java

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/ServerName.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/ServerName.java
index b4e1316..a1399a9 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/ServerName.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/ServerName.java
@@ -18,8 +18,11 @@
  */
 package org.apache.hadoop.hbase;
 
-import com.google.common.net.InetAddresses;
-import com.google.protobuf.InvalidProtocolBufferException;
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
+import java.util.regex.Pattern;
 
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.classification.InterfaceStability;
@@ -28,21 +31,15 @@ import org.apache.hadoop.hbase.protobuf.ProtobufUtil;
 import org.apache.hadoop.hbase.protobuf.generated.ZooKeeperProtos;
 import org.apache.hadoop.hbase.util.Addressing;
 import org.apache.hadoop.hbase.util.Bytes;
+import org.apache.hadoop.hbase.util.Address;
 
-import com.google.common.net.HostAndPort;
 import com.google.common.net.InetAddresses;
 import com.google.protobuf.InvalidProtocolBufferException;
 
-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Locale;
-import java.util.regex.Pattern;
-
 /**
- * Instance of an HBase ServerName.
- * A server name is used uniquely identifying a server instance in a cluster and is made
- * of the combination of hostname, port, and startcode.  The startcode distingushes restarted
+ * Name of a particular incarnation of an HBase Server.
+ * A {@link ServerName} is used uniquely identifying a server instance in a cluster and is made
+ * of the combination of hostname, port, and startcode.  The startcode distinguishes restarted
  * servers on same hostname and port (startcode is usually timestamp of server startup). The
  * {@link #toString()} format of ServerName is safe to use in the  filesystem and as znode name
  * up in ZooKeeper.  Its format is:
@@ -53,13 +50,17 @@ import java.util.regex.Pattern;
  * the {@link #toString()} would be <code>www.example.org,1234,1212121212</code>.
  *
  * <p>You can obtain a versioned serialized form of this class by calling
- * {@link #getVersionedBytes()}.  To deserialize, call {@link #parseVersionedServerName(byte[])}
+ * {@link #getVersionedBytes()}.  To deserialize, call
+ * {@link #parseVersionedServerName(byte[])}.
+ * 
+ * <p>Use {@link #getAddress()} to obtain the Server hostname + port
+ * (Endpoint/Socket Address).
  *
  * <p>Immutable.
  */
 @InterfaceAudience.Public
 @InterfaceStability.Evolving
-  public class ServerName implements Comparable<ServerName>, Serializable {
+public class ServerName implements Comparable<ServerName>, Serializable {
   private static final long serialVersionUID = 1367463982557264981L;
 
   /**
@@ -93,10 +94,8 @@ import java.util.regex.Pattern;
   public static final String UNKNOWN_SERVERNAME = "#unknown#";
 
   private final String servername;
-  private final String hostnameOnly;
-  private final int port;
   private final long startcode;
-  private transient HostAndPort hostAndPort;
+  private transient Address address;
 
   /**
    * Cached versioned bytes of this ServerName instance.
@@ -106,18 +105,33 @@ import java.util.regex.Pattern;
   public static final List<ServerName> EMPTY_SERVER_LIST = new ArrayList<ServerName>(0);
 
   private ServerName(final String hostname, final int port, final long startcode) {
-    // Drop the domain is there is one; no need of it in a local cluster.  With it, we get long
-    // unwieldy names.
-    this.hostnameOnly = hostname;
-    this.port = port;
+    this(Address.fromParts(hostname, port), startcode);
+  }
+
+  private ServerName(final Address address, final long startcode) {
+    // Use HostAndPort to host port and hostname. Does validation and can do ipv6
+    this.address = address;
     this.startcode = startcode;
-    this.servername = getServerName(hostname, port, startcode);
+    this.servername = getServerName(this.address.getHostname(),
+        this.address.getPort(), startcode);
+  }
+
+  private ServerName(final String serverName) {
+    this(parseHostname(serverName), parsePort(serverName),
+      parseStartcode(serverName));
+  }
+
+  private ServerName(final String hostAndPort, final long startCode) {
+    this(Address.fromString(hostAndPort), startCode);
   }
 
   /**
    * @param hostname
    * @return hostname minus the domain, if there is one (will do pass-through on ip addresses)
+   * @deprecated Since 2.0. This is for internal use only.
    */
+  @Deprecated
+  // Make this private in hbase-3.0.
   static String getHostNameMinusDomain(final String hostname) {
     if (InetAddresses.isInetAddress(hostname)) return hostname;
     String [] parts = hostname.split("\\.");
@@ -125,16 +139,11 @@ import java.util.regex.Pattern;
     return parts[0];
   }
 
-  private ServerName(final String serverName) {
-    this(parseHostname(serverName), parsePort(serverName),
-      parseStartcode(serverName));
-  }
-
-  private ServerName(final String hostAndPort, final long startCode) {
-    this(Addressing.parseHostname(hostAndPort),
-      Addressing.parsePort(hostAndPort), startCode);
-  }
-
+  /**
+   * @deprecated Since 2.0. Use {@link #valueOf(String)}
+   */
+  @Deprecated
+  // This is unused. Get rid of it.
   public static String parseHostname(final String serverName) {
     if (serverName == null || serverName.length() <= 0) {
       throw new IllegalArgumentException("Passed hostname is null or empty");
@@ -146,11 +155,21 @@ import java.util.regex.Pattern;
     return serverName.substring(0, index);
   }
 
+  /**
+   * @deprecated Since 2.0. Use {@link #valueOf(String)}
+   */
+  @Deprecated
+  // This is unused. Get rid of it.
   public static int parsePort(final String serverName) {
     String [] split = serverName.split(SERVERNAME_SEPARATOR);
     return Integer.parseInt(split[1]);
   }
 
+  /**
+   * @deprecated Since 2.0. Use {@link #valueOf(String)}
+   */
+  @Deprecated
+  // This is unused. Get rid of it.
   public static long parseStartcode(final String serverName) {
     int index = serverName.lastIndexOf(SERVERNAME_SEPARATOR);
     return Long.parseLong(serverName.substring(index + 1));
@@ -196,7 +215,8 @@ import java.util.regex.Pattern;
    */
   public String toShortString() {
     return Addressing.createHostAndPortStr(
-        getHostNameMinusDomain(hostnameOnly), port);
+        getHostNameMinusDomain(this.address.getHostname()),
+        this.address.getPort());
   }
 
   /**
@@ -215,11 +235,11 @@ import java.util.regex.Pattern;
   }
 
   public String getHostname() {
-    return hostnameOnly;
+    return this.address.getHostname();
   }
 
   public int getPort() {
-    return port;
+    return this.address.getPort();
   }
 
   public long getStartcode() {
@@ -233,7 +253,10 @@ import java.util.regex.Pattern;
    * @param startcode
    * @return Server name made of the concatenation of hostname, port and
    * startcode formatted as <code>&lt;hostname&gt; ',' &lt;port&gt; ',' &lt;startcode&gt;</code>
+   * @deprecated Since 2.0. Use {@link ServerName#valueOf(String, int, long)} instead.
    */
+  @Deprecated
+  // TODO: Make this private in hbase-3.0.
   static String getServerName(String hostName, int port, long startcode) {
     final StringBuilder name = new StringBuilder(hostName.length() + 1 + 5 + 1 + 13);
     name.append(hostName.toLowerCase(Locale.ROOT));
@@ -249,7 +272,9 @@ import java.util.regex.Pattern;
    * @param startcode
    * @return Server name made of the concatenation of hostname, port and
    * startcode formatted as <code>&lt;hostname&gt; ',' &lt;port&gt; ',' &lt;startcode&gt;</code>
+   * @deprecated Since 2.0. Use {@link ServerName#valueOf(String, long)} instead.
    */
+  @Deprecated
   public static String getServerName(final String hostAndPort,
       final long startcode) {
     int index = hostAndPort.indexOf(":");
@@ -261,22 +286,23 @@ import java.util.regex.Pattern;
   /**
    * @return Hostname and port formatted as described at
    * {@link Addressing#createHostAndPortStr(String, int)}
+   * @deprecated Since 2.0. Use {@link #getAddress()} instead.
    */
+  @Deprecated
   public String getHostAndPort() {
-    return Addressing.createHostAndPortStr(hostnameOnly, port);
+    return this.address.toString();
   }
 
-  public HostAndPort getHostPort() {
-    if (hostAndPort == null) {
-      hostAndPort = HostAndPort.fromParts(hostnameOnly, port);
-    }
-    return hostAndPort;
+  public Address getAddress() {
+    return this.address;
   }
 
   /**
    * @param serverName ServerName in form specified by {@link #getServerName()}
    * @return The server start code parsed from <code>servername</code>
+   * @deprecated Since 2.0. Use instance of ServerName to pull out start code.
    */
+  @Deprecated
   public static long getServerStartcodeFromServerName(final String serverName) {
     int index = serverName.lastIndexOf(SERVERNAME_SEPARATOR);
     return Long.parseLong(serverName.substring(index + 1));
@@ -286,7 +312,9 @@ import java.util.regex.Pattern;
    * Utility method to excise the start code from a server name
    * @param inServerName full server name
    * @return server name less its start code
+   * @deprecated Since 2.0. Use {@link #getAddress()}
    */
+  @Deprecated
   public static String getServerNameLessStartCode(String inServerName) {
     if (inServerName != null && inServerName.length() > 0) {
       int index = inServerName.lastIndexOf(SERVERNAME_SEPARATOR);
@@ -326,6 +354,7 @@ import java.util.regex.Pattern;
    */
   public static boolean isSameHostnameAndPort(final ServerName left,
       final ServerName right) {
+    // TODO: Make this left.getAddress().equals(right.getAddress())
     if (left == null) return false;
     if (right == null) return false;
     return left.getHostname().compareToIgnoreCase(right.getHostname()) == 0 &&
@@ -414,4 +443,4 @@ import java.util.regex.Pattern;
     int port = Addressing.parsePort(str);
     return valueOf(hostname, port, -1L);
   }
-}
+}
\ No newline at end of file
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
index 6be8978..1531c86 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
@@ -21,7 +21,6 @@ package org.apache.hadoop.hbase.protobuf;
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.ListMultimap;
 import com.google.common.collect.Lists;
-import com.google.common.net.HostAndPort;
 import com.google.protobuf.ByteString;
 import com.google.protobuf.CodedInputStream;
 import com.google.protobuf.InvalidProtocolBufferException;
@@ -156,6 +155,7 @@ import org.apache.hadoop.hbase.security.access.UserPermission;
 import org.apache.hadoop.hbase.security.token.AuthenticationTokenIdentifier;
 import org.apache.hadoop.hbase.security.visibility.Authorizations;
 import org.apache.hadoop.hbase.security.visibility.CellVisibility;
+import org.apache.hadoop.hbase.util.Address;
 import org.apache.hadoop.hbase.util.ByteStringer;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.DynamicClassLoader;
@@ -3326,7 +3326,7 @@ public final class ProtobufUtil {
   public static RSGroupInfo toGroupInfo(RSGroupProtos.RSGroupInfo proto) {
     RSGroupInfo RSGroupInfo = new RSGroupInfo(proto.getName());
     for(HBaseProtos.ServerName el: proto.getServersList()) {
-      RSGroupInfo.addServer(HostAndPort.fromParts(el.getHostName(), el.getPort()));
+      RSGroupInfo.addServer(Address.fromParts(el.getHostName(), el.getPort()));
     }
     for(HBaseProtos.TableName pTableName: proto.getTablesList()) {
       RSGroupInfo.addTable(ProtobufUtil.toTableName(pTableName));
@@ -3342,9 +3342,9 @@ public final class ProtobufUtil {
     }
     List<HBaseProtos.ServerName> hostports =
         new ArrayList<HBaseProtos.ServerName>(pojo.getServers().size());
-    for(HostAndPort el: pojo.getServers()) {
+    for(Address el: pojo.getServers()) {
       hostports.add(HBaseProtos.ServerName.newBuilder()
-          .setHostName(el.getHostText())
+          .setHostName(el.getHostname())
           .setPort(el.getPort())
           .build());
     }
diff --git a/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAsyncProcess.java b/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAsyncProcess.java
index cf5b7bf..06f054b 100644
--- a/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAsyncProcess.java
+++ b/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAsyncProcess.java
@@ -83,9 +83,9 @@ public class TestAsyncProcess {
   private static final byte[] FAILS = "FAILS".getBytes();
   private static final Configuration conf = new Configuration();
 
-  private static ServerName sn = ServerName.valueOf("s1:1,1");
-  private static ServerName sn2 = ServerName.valueOf("s2:2,2");
-  private static ServerName sn3 = ServerName.valueOf("s3:3,3");
+  private static ServerName sn = ServerName.valueOf("s1,1,1");
+  private static ServerName sn2 = ServerName.valueOf("s2,2,2");
+  private static ServerName sn3 = ServerName.valueOf("s3,3,3");
   private static HRegionInfo hri1 =
       new HRegionInfo(DUMMY_TABLE, DUMMY_BYTES_1, DUMMY_BYTES_2, false, 1);
   private static HRegionInfo hri2 =
diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfo.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfo.java
index 0fb02d8..362bb9e 100644
--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfo.java
+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfo.java
@@ -1,6 +1,4 @@
 /**
- * Copyright The Apache Software Foundation
- *
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -21,7 +19,6 @@
 package org.apache.hadoop.hbase.rsgroup;
 
 import com.google.common.collect.Sets;
-import com.google.common.net.HostAndPort;
 
 import java.util.Collection;
 import java.util.NavigableSet;
@@ -30,6 +27,7 @@ import java.util.Set;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.classification.InterfaceStability;
+import org.apache.hadoop.hbase.util.Address;
 
 /**
  * Stores the group information of region server groups.
@@ -37,20 +35,19 @@ import org.apache.hadoop.hbase.classification.InterfaceStability;
 @InterfaceAudience.Public
 @InterfaceStability.Evolving
 public class RSGroupInfo {
-
   public static final String DEFAULT_GROUP = "default";
   public static final String NAMESPACEDESC_PROP_GROUP = "hbase.rsgroup.name";
 
   private String name;
-  private Set<HostAndPort> servers;
+  private Set<Address> servers;
   private NavigableSet<TableName> tables;
 
   public RSGroupInfo(String name) {
-    this(name, Sets.<HostAndPort>newHashSet(), Sets.<TableName>newTreeSet());
+    this(name, Sets.<Address>newHashSet(), Sets.<TableName>newTreeSet());
   }
 
   RSGroupInfo(String name,
-              Set<HostAndPort> servers,
+              Set<Address> servers,
               NavigableSet<TableName> tables) {
     this.name = name;
     this.servers = servers;
@@ -77,7 +74,7 @@ public class RSGroupInfo {
    *
    * @param hostPort the server
    */
-  public void addServer(HostAndPort hostPort){
+  public void addServer(Address hostPort){
     servers.add(hostPort);
   }
 
@@ -86,7 +83,7 @@ public class RSGroupInfo {
    *
    * @param hostPort the servers
    */
-  public void addAllServers(Collection<HostAndPort> hostPort){
+  public void addAllServers(Collection<Address> hostPort){
     servers.addAll(hostPort);
   }
 
@@ -94,7 +91,7 @@ public class RSGroupInfo {
    * @param hostPort hostPort of the server
    * @return true, if a server with hostPort is found
    */
-  public boolean containsServer(HostAndPort hostPort) {
+  public boolean containsServer(Address hostPort) {
     return servers.contains(hostPort);
   }
 
@@ -103,7 +100,7 @@ public class RSGroupInfo {
    *
    * @return set of servers
    */
-  public Set<HostAndPort> getServers() {
+  public Set<Address> getServers() {
     return servers;
   }
 
@@ -112,7 +109,7 @@ public class RSGroupInfo {
    *
    * @param hostPort HostPort of the server to remove
    */
-  public boolean removeServer(HostAndPort hostPort) {
+  public boolean removeServer(Address hostPort) {
     return servers.remove(hostPort);
   }
 
@@ -183,5 +180,4 @@ public class RSGroupInfo {
     result = 31 * result + name.hashCode();
     return result;
   }
-
-}
+}
\ No newline at end of file
diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Address.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Address.java
new file mode 100644
index 0000000..8bef9f5
--- /dev/null
+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Address.java
@@ -0,0 +1,81 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.util;
+
+import org.apache.hadoop.hbase.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.classification.InterfaceStability;
+
+import com.google.common.net.HostAndPort;
+
+/**
+ * An immutable type to hold a hostname and port, like a
+ * java.net.InetSocketAddress (but without danger of our calling
+ * resolve) or an Endpoint.
+ * <p>This class is a facade over Guava's {@link HostAndPort}. We
+ * cannot have Guava classes in our API hence this Type.
+ */
+@InterfaceStability.Evolving
+@InterfaceAudience.Public
+public class Address {
+  public HostAndPort hostAndPort;
+
+  private Address(HostAndPort hostAndPort) {
+    this.hostAndPort = hostAndPort;
+  }
+
+  public static Address fromParts(String hostname, int port) {
+    return new Address(HostAndPort.fromParts(hostname, port));
+  }
+
+  public static Address fromString(String hostnameAndPort) {
+    return new Address(HostAndPort.fromString(hostnameAndPort));
+  }
+
+  public String getHostname() {
+    return this.hostAndPort.getHostText();
+  }
+
+  public int getPort() {
+    return this.hostAndPort.getPort();
+  }
+
+  @Override
+  public String toString() {
+    return this.hostAndPort.toString();
+  }
+
+  @Override
+  // Don't use HostAndPort equals... It is wonky including
+  // ipv6 brackets
+  public boolean equals(Object other) {
+    if (this == other) {
+      return true;
+    }
+    if (other instanceof Address) {
+      Address that = (Address)other;
+      return this.getHostname().equals(that.getHostname()) &&
+          this.getPort() == that.getPort();
+    }
+    return false;
+  }
+
+  @Override
+  public int hashCode() {
+    return this.getHostname().hashCode() ^ getPort();
+  }
+}
\ No newline at end of file
diff --git a/hbase-it/src/test/java/org/apache/hadoop/hbase/rsgroup/IntegrationTestRSGroup.java b/hbase-it/src/test/java/org/apache/hadoop/hbase/rsgroup/IntegrationTestRSGroup.java
index fe9c58c2..2c7713d 100644
--- a/hbase-it/src/test/java/org/apache/hadoop/hbase/rsgroup/IntegrationTestRSGroup.java
+++ b/hbase-it/src/test/java/org/apache/hadoop/hbase/rsgroup/IntegrationTestRSGroup.java
@@ -26,6 +26,7 @@ import org.apache.hadoop.hbase.Waiter;
 import org.apache.hadoop.hbase.testclassification.IntegrationTests;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.BeforeClass;
 import org.junit.experimental.categories.Category;
 
 /**
@@ -37,11 +38,11 @@ import org.junit.experimental.categories.Category;
 public class IntegrationTestRSGroup extends TestRSGroupsBase {
   //Integration specific
   private final static Log LOG = LogFactory.getLog(IntegrationTestRSGroup.class);
-  private static boolean initialized = false;
+  private static boolean INITIALIZED = false;
 
-  @Before
+  @BeforeClass
   public void beforeMethod() throws Exception {
-    if(!initialized) {
+    if(!INITIALIZED) {
       LOG.info("Setting up IntegrationTestGroup");
       LOG.info("Initializing cluster with " + NUM_SLAVES_BASE + " servers");
       TEST_UTIL = new IntegrationTestingUtility();
@@ -49,10 +50,10 @@ public class IntegrationTestRSGroup extends TestRSGroupsBase {
       //set shared configs
       admin = TEST_UTIL.getHBaseAdmin();
       cluster = TEST_UTIL.getHBaseClusterInterface();
-      rsGroupAdmin = new VerifyingRSGroupAdminClient(rsGroupAdmin.newClient(TEST_UTIL.getConnection()),
+      rsGroupAdmin = new VerifyingRSGroupAdminClient(new RSGroupAdminClient(TEST_UTIL.getConnection()),
           TEST_UTIL.getConfiguration());
       LOG.info("Done initializing cluster");
-      initialized = true;
+      INITIALIZED = true;
       //cluster may not be clean
       //cleanup when initializing
       afterMethod();
@@ -62,6 +63,7 @@ public class IntegrationTestRSGroup extends TestRSGroupsBase {
   @After
   public void afterMethod() throws Exception {
     LOG.info("Cleaning up previous test run");
+    rsGroupAdmin.close();
     //cleanup previous artifacts
     deleteTableIfNecessary();
     deleteNamespaceIfNecessary();
diff --git a/hbase-rsgroup/pom.xml b/hbase-rsgroup/pom.xml
index d4cfedf..f2c2efd 100644
--- a/hbase-rsgroup/pom.xml
+++ b/hbase-rsgroup/pom.xml
@@ -49,23 +49,6 @@
           <skipAssembly>true</skipAssembly>
         </configuration>
       </plugin>
-      <plugin>
-        <artifactId>maven-surefire-plugin</artifactId>
-        <!-- Always skip the second part executions, since we only run
-          simple unit tests in this module -->
-        <executions>
-          <execution>
-            <id>secondPartTestsExecution</id>
-            <phase>test</phase>
-            <goals>
-              <goal>test</goal>
-            </goals>
-            <configuration>
-              <skip>true</skip>
-            </configuration>
-          </execution>
-        </executions>
-      </plugin>
       <!-- Make a jar and put the sources in the jar -->
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
@@ -136,11 +119,6 @@
     </dependency>
     <dependency>
       <groupId>org.apache.hbase</groupId>
-      <artifactId>hbase-common</artifactId>
-      <type>test-jar</type>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.hbase</groupId>
       <artifactId>hbase-protocol</artifactId>
     </dependency>
     <dependency>
@@ -226,7 +204,7 @@
         <surefire.skipFirstPart>true</surefire.skipFirstPart>
       </properties>
     </profile>
-    <!-- profile against Hadoop 1.0.x: This is the default. It has to have the same
+    <!-- profile against Hadoop 1.0.x. It has to have the same
  activation property as the parent Hadoop 1.0.x profile to make sure it gets run at
  the same time. -->
     <profile>
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdmin.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdmin.java
index f94d0f6..140ff08 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdmin.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdmin.java
@@ -1,6 +1,4 @@
 /**
- * Copyright The Apache Software Foundation
- *
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -19,8 +17,6 @@
  */
 package org.apache.hadoop.hbase.rsgroup;
 
-import com.google.common.net.HostAndPort;
-
 import java.io.Closeable;
 import java.io.IOException;
 import java.util.List;
@@ -28,31 +24,20 @@ import java.util.Set;
 
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
-import org.apache.hadoop.hbase.client.Connection;
+import org.apache.hadoop.hbase.util.Address;
 
 /**
  * Group user API interface used between client and server.
  */
 @InterfaceAudience.Private
-public abstract class RSGroupAdmin implements Closeable {
-
-  /**
-   * Create a new RSGroupAdmin client
-   * @param conn connection RSGroupAdmin instance will use
-   * @return a new RSGroupAdmin client
-   * @throws IOException on failure to create new client
-   */
-  public static RSGroupAdmin newClient(Connection conn) throws IOException {
-    return new RSGroupAdminClient(conn);
-  }
-
+public interface RSGroupAdmin extends Closeable {
   /**
    * Gets the regionserver group information.
    *
    * @param groupName the group name
    * @return An instance of RSGroupInfo
    */
-  public abstract RSGroupInfo getRSGroupInfo(String groupName) throws IOException;
+  RSGroupInfo getRSGroupInfo(String groupName) throws IOException;
 
   /**
    * Gets the regionserver group info of table.
@@ -60,7 +45,7 @@ public abstract class RSGroupAdmin implements Closeable {
    * @param tableName the table name
    * @return An instance of RSGroupInfo.
    */
-  public abstract RSGroupInfo getRSGroupInfoOfTable(TableName tableName) throws IOException;
+  RSGroupInfo getRSGroupInfoOfTable(TableName tableName) throws IOException;
 
   /**
    * Move a set of serves to another group
@@ -70,7 +55,8 @@ public abstract class RSGroupAdmin implements Closeable {
    * @param targetGroup the target group
    * @throws java.io.IOException Signals that an I/O exception has occurred.
    */
-  public abstract void moveServers(Set<HostAndPort> servers, String targetGroup) throws IOException;
+  void moveServers(Set<Address> servers, String targetGroup)
+  throws IOException;
 
   /**
    * Move tables to a new group.
@@ -79,21 +65,21 @@ public abstract class RSGroupAdmin implements Closeable {
    * @param targetGroup target group
    * @throws java.io.IOException on failure to move tables
    */
-  public abstract void moveTables(Set<TableName> tables, String targetGroup) throws IOException;
+  void moveTables(Set<TableName> tables, String targetGroup) throws IOException;
 
   /**
    * Add a new group
    * @param name name of the group
    * @throws java.io.IOException on failure to add group
    */
-  public abstract void addRSGroup(String name) throws IOException;
+  void addRSGroup(String name) throws IOException;
 
   /**
    * Remove a regionserver group
    * @param name name of the group
    * @throws java.io.IOException on failure to remove group
    */
-  public abstract void removeRSGroup(String name) throws IOException;
+  void removeRSGroup(String name) throws IOException;
 
   /**
    * Balance the regions in a group
@@ -102,14 +88,14 @@ public abstract class RSGroupAdmin implements Closeable {
    * @return boolean whether balance ran or not
    * @throws java.io.IOException on unexpected failure to balance group
    */
-  public abstract boolean balanceRSGroup(String name) throws IOException;
+  boolean balanceRSGroup(String name) throws IOException;
 
   /**
    * Lists the existing groups.
    *
    * @return Collection of RSGroupInfo.
    */
-  public abstract List<RSGroupInfo> listRSGroups() throws IOException;
+  List<RSGroupInfo> listRSGroups() throws IOException;
 
   /**
    * Retrieve the RSGroupInfo a server is affiliated to
@@ -117,5 +103,5 @@ public abstract class RSGroupAdmin implements Closeable {
    * @return RSGroupInfo associated with the server
    * @throws java.io.IOException on unexpected failure to retrieve GroupInfo
    */
-  public abstract RSGroupInfo getRSGroupOfServer(HostAndPort hostPort) throws IOException;
-}
+  RSGroupInfo getRSGroupOfServer(Address hostPort) throws IOException;
+}
\ No newline at end of file
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminClient.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminClient.java
index a7f14f7..d3822a6 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminClient.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminClient.java
@@ -1,6 +1,4 @@
 /**
- * Copyright The Apache Software Foundation
- *
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -19,17 +17,11 @@
  */
 package org.apache.hadoop.hbase.rsgroup;
 
-import com.google.common.collect.Sets;
-import com.google.common.net.HostAndPort;
-import com.google.protobuf.ServiceException;
-
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.classification.InterfaceStability;
@@ -40,6 +32,10 @@ import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos;
 import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.GetRSGroupInfoOfServerResponse;
 import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.GetRSGroupInfoOfTableResponse;
 import org.apache.hadoop.hbase.protobuf.generated.RSGroupProtos;
+import org.apache.hadoop.hbase.util.Address;
+
+import com.google.common.collect.Sets;
+import com.google.protobuf.ServiceException;
 
 
 /**
@@ -47,12 +43,11 @@ import org.apache.hadoop.hbase.protobuf.generated.RSGroupProtos;
  */
 @InterfaceAudience.Public
 @InterfaceStability.Evolving
-class RSGroupAdminClient extends RSGroupAdmin {
-  private RSGroupAdminProtos.RSGroupAdminService.BlockingInterface proxy;
-  private static final Log LOG = LogFactory.getLog(RSGroupAdminClient.class);
+class RSGroupAdminClient implements RSGroupAdmin {
+  private RSGroupAdminProtos.RSGroupAdminService.BlockingInterface stub;
 
   public RSGroupAdminClient(Connection conn) throws IOException {
-    proxy = RSGroupAdminProtos.RSGroupAdminService.newBlockingStub(
+    stub = RSGroupAdminProtos.RSGroupAdminService.newBlockingStub(
         conn.getAdmin().coprocessorService());
   }
 
@@ -60,7 +55,7 @@ class RSGroupAdminClient extends RSGroupAdmin {
   public RSGroupInfo getRSGroupInfo(String groupName) throws IOException {
     try {
       RSGroupAdminProtos.GetRSGroupInfoResponse resp =
-        proxy.getRSGroupInfo(null,
+        stub.getRSGroupInfo(null,
             RSGroupAdminProtos.GetRSGroupInfoRequest.newBuilder()
                 .setRSGroupName(groupName).build());
       if(resp.hasRSGroupInfo()) {
@@ -79,7 +74,7 @@ class RSGroupAdminClient extends RSGroupAdmin {
             .setTableName(ProtobufUtil.toProtoTableName(tableName)).build();
 
     try {
-      GetRSGroupInfoOfTableResponse resp = proxy.getRSGroupInfoOfTable(null, request);
+      GetRSGroupInfoOfTableResponse resp = stub.getRSGroupInfoOfTable(null, request);
       if (resp.hasRSGroupInfo()) {
         return ProtobufUtil.toGroupInfo(resp.getRSGroupInfo());
       }
@@ -90,11 +85,11 @@ class RSGroupAdminClient extends RSGroupAdmin {
   }
 
   @Override
-  public void moveServers(Set<HostAndPort> servers, String targetGroup) throws IOException {
+  public void moveServers(Set<Address> servers, String targetGroup) throws IOException {
     Set<HBaseProtos.ServerName> hostPorts = Sets.newHashSet();
-    for(HostAndPort el: servers) {
+    for(Address el: servers) {
       hostPorts.add(HBaseProtos.ServerName.newBuilder()
-        .setHostName(el.getHostText())
+        .setHostName(el.getHostname())
         .setPort(el.getPort())
         .build());
     }
@@ -104,7 +99,7 @@ class RSGroupAdminClient extends RSGroupAdmin {
             .addAllServers(hostPorts).build();
 
     try {
-      proxy.moveServers(null, request);
+      stub.moveServers(null, request);
     } catch (ServiceException e) {
       throw ProtobufUtil.getRemoteException(e);
     }
@@ -119,7 +114,7 @@ class RSGroupAdminClient extends RSGroupAdmin {
       builder.addTableName(ProtobufUtil.toProtoTableName(tableName));
     }
     try {
-      proxy.moveTables(null, builder.build());
+      stub.moveTables(null, builder.build());
     } catch (ServiceException e) {
       throw ProtobufUtil.getRemoteException(e);
     }
@@ -131,7 +126,7 @@ class RSGroupAdminClient extends RSGroupAdmin {
         RSGroupAdminProtos.AddRSGroupRequest.newBuilder()
             .setRSGroupName(groupName).build();
     try {
-      proxy.addRSGroup(null, request);
+      stub.addRSGroup(null, request);
     } catch (ServiceException e) {
       throw ProtobufUtil.getRemoteException(e);
     }
@@ -143,7 +138,7 @@ class RSGroupAdminClient extends RSGroupAdmin {
         RSGroupAdminProtos.RemoveRSGroupRequest.newBuilder()
             .setRSGroupName(name).build();
     try {
-      proxy.removeRSGroup(null, request);
+      stub.removeRSGroup(null, request);
     } catch (ServiceException e) {
       throw ProtobufUtil.getRemoteException(e);
     }
@@ -156,7 +151,7 @@ class RSGroupAdminClient extends RSGroupAdmin {
             .setRSGroupName(name).build();
 
     try {
-      return proxy.balanceRSGroup(null, request).getBalanceRan();
+      return stub.balanceRSGroup(null, request).getBalanceRan();
     } catch (ServiceException e) {
       throw ProtobufUtil.getRemoteException(e);
     }
@@ -166,7 +161,7 @@ class RSGroupAdminClient extends RSGroupAdmin {
   public List<RSGroupInfo> listRSGroups() throws IOException {
     try {
       List<RSGroupProtos.RSGroupInfo> resp =
-          proxy.listRSGroupInfos(null,
+          stub.listRSGroupInfos(null,
               RSGroupAdminProtos.ListRSGroupInfosRequest.newBuilder().build()).getRSGroupInfoList();
       List<RSGroupInfo> result = new ArrayList<RSGroupInfo>(resp.size());
       for(RSGroupProtos.RSGroupInfo entry: resp) {
@@ -179,16 +174,16 @@ class RSGroupAdminClient extends RSGroupAdmin {
   }
 
   @Override
-  public RSGroupInfo getRSGroupOfServer(HostAndPort hostPort) throws IOException {
+  public RSGroupInfo getRSGroupOfServer(Address hostPort) throws IOException {
     RSGroupAdminProtos.GetRSGroupInfoOfServerRequest request =
         RSGroupAdminProtos.GetRSGroupInfoOfServerRequest.newBuilder()
             .setServer(HBaseProtos.ServerName.newBuilder()
-                .setHostName(hostPort.getHostText())
+                .setHostName(hostPort.getHostname())
                 .setPort(hostPort.getPort())
                 .build())
             .build();
     try {
-      GetRSGroupInfoOfServerResponse resp = proxy.getRSGroupInfoOfServer(null, request);
+      GetRSGroupInfoOfServerResponse resp = stub.getRSGroupInfoOfServer(null, request);
       if (resp.hasRSGroupInfo()) {
         return ProtobufUtil.toGroupInfo(resp.getRSGroupInfo());
       }
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java
index 5ec97d7..13afe3a 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java
@@ -1,6 +1,4 @@
 /**
- * Copyright The Apache Software Foundation
- *
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -20,19 +18,11 @@
 
 package org.apache.hadoop.hbase.rsgroup;
 
-import com.google.common.collect.Sets;
-import com.google.common.net.HostAndPort;
-import com.google.protobuf.RpcCallback;
-import com.google.protobuf.RpcController;
-import com.google.protobuf.Service;
-
 import java.io.IOException;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hbase.Coprocessor;
 import org.apache.hadoop.hbase.CoprocessorEnvironment;
 import org.apache.hadoop.hbase.HColumnDescriptor;
@@ -43,6 +33,7 @@ import org.apache.hadoop.hbase.NamespaceDescriptor;
 import org.apache.hadoop.hbase.ProcedureInfo;
 import org.apache.hadoop.hbase.ServerName;
 import org.apache.hadoop.hbase.TableName;
+import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.constraint.ConstraintException;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorService;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
@@ -77,12 +68,16 @@ import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.MoveTablesR
 import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.RSGroupAdminService;
 import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.RemoveRSGroupRequest;
 import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.RemoveRSGroupResponse;
+import org.apache.hadoop.hbase.util.Address;
 
+import com.google.common.collect.Sets;
+import com.google.protobuf.RpcCallback;
+import com.google.protobuf.RpcController;
+import com.google.protobuf.Service;
 
+@InterfaceAudience.Private
 public class RSGroupAdminEndpoint extends RSGroupAdminService
     implements CoprocessorService, Coprocessor, MasterObserver {
-
-  private static final Log LOG = LogFactory.getLog(RSGroupAdminEndpoint.class);
   private MasterServices master = null;
 
   private static RSGroupInfoManagerImpl groupInfoManager;
@@ -118,112 +113,94 @@ public class RSGroupAdminEndpoint extends RSGroupAdminService
   public void getRSGroupInfo(RpcController controller,
                            GetRSGroupInfoRequest request,
                            RpcCallback<GetRSGroupInfoResponse> done) {
-    GetRSGroupInfoResponse response = null;
+    GetRSGroupInfoResponse.Builder builder = GetRSGroupInfoResponse.newBuilder();
     try {
-      GetRSGroupInfoResponse.Builder builder =
-          GetRSGroupInfoResponse.newBuilder();
       RSGroupInfo RSGroupInfo = groupAdminServer.getRSGroupInfo(request.getRSGroupName());
       if(RSGroupInfo != null) {
         builder.setRSGroupInfo(ProtobufUtil.toProtoGroupInfo(RSGroupInfo));
       }
-      response = builder.build();
     } catch (IOException e) {
       ResponseConverter.setControllerException(controller, e);
     }
-    done.run(response);
+    done.run(builder.build());
   }
 
   @Override
   public void getRSGroupInfoOfTable(RpcController controller,
                                   GetRSGroupInfoOfTableRequest request,
                                   RpcCallback<GetRSGroupInfoOfTableResponse> done) {
-    GetRSGroupInfoOfTableResponse response = null;
+    GetRSGroupInfoOfTableResponse.Builder builder = GetRSGroupInfoOfTableResponse.newBuilder();
     try {
-      GetRSGroupInfoOfTableResponse.Builder builder =
-          GetRSGroupInfoOfTableResponse.newBuilder();
       TableName tableName = ProtobufUtil.toTableName(request.getTableName());
       RSGroupInfo RSGroupInfo = groupAdminServer.getRSGroupInfoOfTable(tableName);
-      if (RSGroupInfo == null) {
-        response = builder.build();
-      } else {
-        response = builder.setRSGroupInfo(ProtobufUtil.toProtoGroupInfo(RSGroupInfo)).build();
+      if (RSGroupInfo != null) {
+        builder.setRSGroupInfo(ProtobufUtil.toProtoGroupInfo(RSGroupInfo));
       }
     } catch (IOException e) {
       ResponseConverter.setControllerException(controller, e);
     }
-    done.run(response);
+    done.run(builder.build());
   }
 
   @Override
   public void moveServers(RpcController controller,
                           MoveServersRequest request,
                           RpcCallback<MoveServersResponse> done) {
-    RSGroupAdminProtos.MoveServersResponse response = null;
+    RSGroupAdminProtos.MoveServersResponse.Builder builder =
+        RSGroupAdminProtos.MoveServersResponse.newBuilder();
     try {
-      RSGroupAdminProtos.MoveServersResponse.Builder builder =
-          RSGroupAdminProtos.MoveServersResponse.newBuilder();
-      Set<HostAndPort> hostPorts = Sets.newHashSet();
+      Set<Address> hostPorts = Sets.newHashSet();
       for(HBaseProtos.ServerName el: request.getServersList()) {
-        hostPorts.add(HostAndPort.fromParts(el.getHostName(), el.getPort()));
+        hostPorts.add(Address.fromParts(el.getHostName(), el.getPort()));
       }
       groupAdminServer.moveServers(hostPorts, request.getTargetGroup());
-      response = builder.build();
     } catch (IOException e) {
       ResponseConverter.setControllerException(controller, e);
     }
-    done.run(response);
+    done.run(builder.build());
   }
 
   @Override
   public void moveTables(RpcController controller,
                          MoveTablesRequest request,
                          RpcCallback<MoveTablesResponse> done) {
-    MoveTablesResponse response = null;
+    MoveTablesResponse.Builder builder = MoveTablesResponse.newBuilder();
     try {
-      MoveTablesResponse.Builder builder =
-          MoveTablesResponse.newBuilder();
       Set<TableName> tables = new HashSet<TableName>(request.getTableNameList().size());
       for(HBaseProtos.TableName tableName: request.getTableNameList()) {
         tables.add(ProtobufUtil.toTableName(tableName));
       }
       groupAdminServer.moveTables(tables, request.getTargetGroup());
-      response = builder.build();
     } catch (IOException e) {
       ResponseConverter.setControllerException(controller, e);
     }
-    done.run(response);
+    done.run(builder.build());
   }
 
   @Override
   public void addRSGroup(RpcController controller,
                        AddRSGroupRequest request,
                        RpcCallback<AddRSGroupResponse> done) {
-    AddRSGroupResponse response = null;
+    AddRSGroupResponse.Builder builder = AddRSGroupResponse.newBuilder();
     try {
-      AddRSGroupResponse.Builder builder =
-          AddRSGroupResponse.newBuilder();
       groupAdminServer.addRSGroup(request.getRSGroupName());
-      response = builder.build();
     } catch (IOException e) {
       ResponseConverter.setControllerException(controller, e);
     }
-    done.run(response);
+    done.run(builder.build());
   }
 
   @Override
   public void removeRSGroup(RpcController controller,
                           RemoveRSGroupRequest request,
                           RpcCallback<RemoveRSGroupResponse> done) {
-    RemoveRSGroupResponse response = null;
+    RemoveRSGroupResponse.Builder builder = RemoveRSGroupResponse.newBuilder();
     try {
-      RemoveRSGroupResponse.Builder builder =
-          RemoveRSGroupResponse.newBuilder();
       groupAdminServer.removeRSGroup(request.getRSGroupName());
-      response = builder.build();
     } catch (IOException e) {
       ResponseConverter.setControllerException(controller, e);
     }
-    done.run(response);
+    done.run(builder.build());
   }
 
   @Override
@@ -244,18 +221,15 @@ public class RSGroupAdminEndpoint extends RSGroupAdminService
   public void listRSGroupInfos(RpcController controller,
                              ListRSGroupInfosRequest request,
                              RpcCallback<ListRSGroupInfosResponse> done) {
-    ListRSGroupInfosResponse response = null;
+    ListRSGroupInfosResponse.Builder builder = ListRSGroupInfosResponse.newBuilder();
     try {
-      ListRSGroupInfosResponse.Builder builder =
-          ListRSGroupInfosResponse.newBuilder();
       for(RSGroupInfo RSGroupInfo : groupAdminServer.listRSGroups()) {
         builder.addRSGroupInfo(ProtobufUtil.toProtoGroupInfo(RSGroupInfo));
       }
-      response = builder.build();
     } catch (IOException e) {
       ResponseConverter.setControllerException(controller, e);
     }
-    done.run(response);
+    done.run(builder.build());
   }
 
   @Override
@@ -264,8 +238,8 @@ public class RSGroupAdminEndpoint extends RSGroupAdminService
                                    RpcCallback<GetRSGroupInfoOfServerResponse> done) {
     GetRSGroupInfoOfServerResponse.Builder builder = GetRSGroupInfoOfServerResponse.newBuilder();
     try {
-      HostAndPort hp =
-          HostAndPort.fromParts(request.getServer().getHostName(), request.getServer().getPort());
+      Address hp =
+          Address.fromParts(request.getServer().getHostName(), request.getServer().getPort());
       RSGroupInfo RSGroupInfo = groupAdminServer.getRSGroupOfServer(hp);
       if (RSGroupInfo != null) {
         builder.setRSGroupInfo(ProtobufUtil.toProtoGroupInfo(RSGroupInfo));
@@ -794,12 +768,14 @@ public class RSGroupAdminEndpoint extends RSGroupAdminService
   }
 
   @Override
-  public void preMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx, Set<HostAndPort>
+  public void preMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx,
+      Set<Address>
       servers, String targetGroup) throws IOException {
   }
 
   @Override
-  public void postMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx, Set<HostAndPort>
+  public void postMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx,
+      Set<Address>
       servers, String targetGroup) throws IOException {
   }
 
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminServer.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminServer.java
index fac0f13..dd23944 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminServer.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminServer.java
@@ -1,6 +1,4 @@
 /**
- * Copyright The Apache Software Foundation
- *
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -22,7 +20,6 @@ package org.apache.hadoop.hbase.rsgroup;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import com.google.common.net.HostAndPort;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -54,67 +51,74 @@ import org.apache.hadoop.hbase.master.RegionPlan;
 import org.apache.hadoop.hbase.master.RegionState;
 import org.apache.hadoop.hbase.master.ServerManager;
 import org.apache.hadoop.hbase.master.TableLockManager.TableLock;
+import org.apache.hadoop.hbase.util.Address;
 
 /**
- * Service to support Region Server Grouping (HBase-6721)
+ * Service to support Region Server Grouping (HBase-6721).
  */
 @InterfaceAudience.Private
-public class RSGroupAdminServer extends RSGroupAdmin {
+public class RSGroupAdminServer implements RSGroupAdmin {
   private static final Log LOG = LogFactory.getLog(RSGroupAdminServer.class);
 
   private MasterServices master;
   //List of servers that are being moved from one group to another
   //Key=host:port,Value=targetGroup
-  private ConcurrentMap<HostAndPort,String> serversInTransition =
-      new ConcurrentHashMap<HostAndPort, String>();
-  private RSGroupInfoManager RSGroupInfoManager;
+  private ConcurrentMap<Address,String> serversInTransition =
+      new ConcurrentHashMap<Address, String>();
+  private RSGroupInfoManager rsGroupInfoManager;
 
   public RSGroupAdminServer(MasterServices master,
                             RSGroupInfoManager RSGroupInfoManager) throws IOException {
     this.master = master;
-    this.RSGroupInfoManager = RSGroupInfoManager;
+    this.rsGroupInfoManager = RSGroupInfoManager;
   }
 
   @Override
   public RSGroupInfo getRSGroupInfo(String groupName) throws IOException {
-    return getRSGroupInfoManager().getRSGroup(groupName);
+    RSGroupInfoManager m = getRSGroupInfoManager();
+    synchronized (m) {
+      return m.getRSGroup(groupName);
+    }
   }
 
-
   @Override
   public RSGroupInfo getRSGroupInfoOfTable(TableName tableName) throws IOException {
-    String groupName = getRSGroupInfoManager().getRSGroupOfTable(tableName);
-    if (groupName == null) {
-      return null;
+    RSGroupInfoManager m = getRSGroupInfoManager();
+    String groupName = null;
+    synchronized (m) {
+      groupName = getRSGroupInfoManager().getRSGroupOfTable(tableName);
+      return groupName == null? null: getRSGroupInfoManager().getRSGroup(groupName);
     }
-    return getRSGroupInfoManager().getRSGroup(groupName);
+  }
+
+  private RSGroupInfo getAndCheckRSGroup(String name)
+  throws IOException {
+    if (StringUtils.isEmpty(name)) {
+      throw new ConstraintException("The target group cannot be null.");
+    }
+    RSGroupInfo rsgi = getRSGroupInfo(name);
+    if (rsgi == null) {
+      throw new ConstraintException("Group does not exist: " + name);
+    }
+    return rsgi;
   }
 
   @Override
-  public void moveServers(Set<HostAndPort> servers, String targetGroupName)
+  public void moveServers(Set<Address> servers, String targetGroupName)
       throws IOException {
     if (servers == null) {
-      throw new ConstraintException(
-          "The list of servers cannot be null.");
-    }
-    if (StringUtils.isEmpty(targetGroupName)) {
-      throw new ConstraintException("The target group cannot be null.");
+      throw new ConstraintException("The list of servers cannot be null.");
     }
     if (servers.size() < 1) {
       return;
     }
-
-    RSGroupInfo targetGrp = getRSGroupInfo(targetGroupName);
-    if (targetGrp == null) {
-      throw new ConstraintException("Group does not exist: "+targetGroupName);
-    }
-
+    RSGroupInfo targetGrp = getAndCheckRSGroup(targetGroupName);
     RSGroupInfoManager manager = getRSGroupInfoManager();
     synchronized (manager) {
       if (master.getMasterCoprocessorHost() != null) {
         master.getMasterCoprocessorHost().preMoveServers(servers, targetGroupName);
       }
-      HostAndPort firstServer = servers.iterator().next();
+      Address firstServer = servers.iterator().next();
       //we only allow a move from a single source group
       //so this should be ok
       RSGroupInfo srcGrp = manager.getRSGroupOfServer(firstServer);
@@ -126,11 +130,11 @@ public class RSGroupAdminServer extends RSGroupAdmin {
             "Server "+firstServer+" does not have a group.");
       }
       if (RSGroupInfo.DEFAULT_GROUP.equals(srcGrp.getName())) {
-        Set<HostAndPort> onlineServers = new HashSet<HostAndPort>();
+        Set<Address> onlineServers = new HashSet<Address>();
         for(ServerName server: master.getServerManager().getOnlineServers().keySet()) {
-          onlineServers.add(server.getHostPort());
+          onlineServers.add(server.getAddress());
         }
-        for(HostAndPort el: servers) {
+        for(Address el: servers) {
           if(!onlineServers.contains(el)) {
             throw new ConstraintException(
                 "Server "+el+" is not an online server in default group.");
@@ -146,11 +150,12 @@ public class RSGroupAdminServer extends RSGroupAdmin {
 
       String sourceGroupName = getRSGroupInfoManager()
           .getRSGroupOfServer(srcGrp.getServers().iterator().next()).getName();
-      if(getRSGroupInfo(targetGroupName) == null) {
-        throw new ConstraintException("Target group does not exist: "+targetGroupName);
+      getAndCheckRSGroup(sourceGroupName);
+      if (sourceGroupName.equals(targetGroupName)) {
+        throw new ConstraintException(
+            "Target group is the same as source group: "+targetGroupName);
       }
-
-      for(HostAndPort server: servers) {
+      for (Address server: servers) {
         if (serversInTransition.containsKey(server)) {
           throw new ConstraintException(
               "Server list contains a server that is already being moved: "+server);
@@ -163,36 +168,33 @@ public class RSGroupAdminServer extends RSGroupAdmin {
         }
       }
 
-      if(sourceGroupName.equals(targetGroupName)) {
-        throw new ConstraintException(
-            "Target group is the same as source group: "+targetGroupName);
-      }
-
       try {
         //update the servers as in transition
-        for (HostAndPort server : servers) {
+        for (Address server : servers) {
           serversInTransition.put(server, targetGroupName);
         }
 
         getRSGroupInfoManager().moveServers(servers, sourceGroupName, targetGroupName);
         boolean found;
-        List<HostAndPort> tmpServers = Lists.newArrayList(servers);
+        // Appy makes note that if we were passed in a List of servers,
+        // we'd save having to do stuff like the below.
+        List<Address> tmpServers = Lists.newArrayList(servers);
         do {
           found = false;
-          for (Iterator<HostAndPort> iter = tmpServers.iterator();
+          for (Iterator<Address> iter = tmpServers.iterator();
                iter.hasNext(); ) {
-            HostAndPort rs = iter.next();
+            Address rs = iter.next();
             //get online regions
             List<HRegionInfo> regions = new LinkedList<HRegionInfo>();
             for (Map.Entry<HRegionInfo, ServerName> el :
                 master.getAssignmentManager().getRegionStates().getRegionAssignments().entrySet()) {
-              if (el.getValue().getHostPort().equals(rs)) {
+              if (el.getValue().getAddress().equals(rs)) {
                 regions.add(el.getKey());
               }
             }
             for (RegionState state :
                 master.getAssignmentManager().getRegionStates().getRegionsInTransition().values()) {
-              if (state.getServerName().getHostPort().equals(rs)) {
+              if (state.getServerName().getAddress().equals(rs)) {
                 regions.add(state.getRegion());
               }
             }
@@ -224,7 +226,7 @@ public class RSGroupAdminServer extends RSGroupAdmin {
         } while (found);
       } finally {
         //remove from transition
-        for (HostAndPort server : servers) {
+        for (Address server : servers) {
           serversInTransition.remove(server);
         }
       }
@@ -292,7 +294,10 @@ public class RSGroupAdminServer extends RSGroupAdmin {
     if (master.getMasterCoprocessorHost() != null) {
       master.getMasterCoprocessorHost().preAddRSGroup(name);
     }
-    getRSGroupInfoManager().addRSGroup(new RSGroupInfo(name));
+    RSGroupInfoManager m = getRSGroupInfoManager();
+    synchronized(m) {
+      m.addRSGroup(new RSGroupInfo(name));
+    }
     if (master.getMasterCoprocessorHost() != null) {
       master.getMasterCoprocessorHost().postAddRSGroup(name);
     }
@@ -393,17 +398,26 @@ public class RSGroupAdminServer extends RSGroupAdmin {
 
   @Override
   public List<RSGroupInfo> listRSGroups() throws IOException {
-    return getRSGroupInfoManager().listRSGroups();
+    RSGroupInfoManager m = getRSGroupInfoManager();
+    synchronized (m) {
+      return m.listRSGroups();
+    }
   }
 
   @Override
-  public RSGroupInfo getRSGroupOfServer(HostAndPort hostPort) throws IOException {
-    return getRSGroupInfoManager().getRSGroupOfServer(hostPort);
+  public RSGroupInfo getRSGroupOfServer(Address hostPort) throws IOException {
+    RSGroupInfoManager m = getRSGroupInfoManager();
+    synchronized (m) {
+      return m.getRSGroupOfServer(hostPort);
+    }
   }
 
   @InterfaceAudience.Private
-  public RSGroupInfoManager getRSGroupInfoManager() throws IOException {
-    return RSGroupInfoManager;
+  // Private because the client needs to be careful using rsGroupInfoManager;
+  // All modifications on rsGroupInfoManager must be under a synchronize on
+  // rsGroupInfoManager
+  private RSGroupInfoManager getRSGroupInfoManager() throws IOException {
+    return rsGroupInfoManager;
   }
 
   private Map<String, RegionState> rsGroupGetRegionsInTransition(String groupName)
@@ -446,7 +460,7 @@ public class RSGroupAdminServer extends RSGroupAdmin {
 
     Map<ServerName, List<HRegionInfo>> serverMap = Maps.newHashMap();
     for(ServerName serverName: master.getServerManager().getOnlineServers().keySet()) {
-      if(RSGroupInfo.getServers().contains(serverName.getHostPort())) {
+      if(RSGroupInfo.getServers().contains(serverName.getAddress())) {
         serverMap.put(serverName, Collections.EMPTY_LIST);
       }
     }
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupBasedLoadBalancer.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupBasedLoadBalancer.java
index 913612b..d05b928 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupBasedLoadBalancer.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupBasedLoadBalancer.java
@@ -1,6 +1,4 @@
 /**
- * Copyright The Apache Software Foundation
- *
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -45,6 +43,7 @@ import org.apache.hadoop.hbase.master.LoadBalancer;
 import org.apache.hadoop.hbase.master.MasterServices;
 import org.apache.hadoop.hbase.master.RegionPlan;
 import org.apache.hadoop.hbase.master.balancer.StochasticLoadBalancer;
+import org.apache.hadoop.hbase.util.Address;
 import org.apache.hadoop.util.ReflectionUtils;
 
 import com.google.common.collect.ArrayListMultimap;
@@ -52,7 +51,6 @@ import com.google.common.collect.LinkedListMultimap;
 import com.google.common.collect.ListMultimap;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import com.google.common.net.HostAndPort;
 
 /**
  * GroupBasedLoadBalancer, used when Region Server Grouping is configured (HBase-6721)
@@ -131,9 +129,9 @@ public class RSGroupBasedLoadBalancer implements RSGroupableBalancer {
       for (RSGroupInfo info : RSGroupInfoManager.listRSGroups()) {
         Map<ServerName, List<HRegionInfo>> groupClusterState =
             new HashMap<ServerName, List<HRegionInfo>>();
-        for (HostAndPort sName : info.getServers()) {
+        for (Address sName : info.getServers()) {
           for(ServerName curr: clusterState.keySet()) {
-            if(curr.getHostPort().equals(sName)) {
+            if(curr.getAddress().equals(sName)) {
               groupClusterState.put(curr, correctedState.get(curr));
             }
           }
@@ -266,7 +264,7 @@ public class RSGroupBasedLoadBalancer implements RSGroupableBalancer {
     if (RSGroupInfo != null) {
       return filterServers(RSGroupInfo.getServers(), onlineServers);
     } else {
-      LOG.debug("Group Information found to be null. Some regions might be unassigned.");
+      LOG.warn("Group Information found to be null. Some regions might be unassigned.");
       return Collections.EMPTY_LIST;
     }
   }
@@ -280,12 +278,12 @@ public class RSGroupBasedLoadBalancer implements RSGroupableBalancer {
    *          List of servers which are online.
    * @return the list
    */
-  private List<ServerName> filterServers(Collection<HostAndPort> servers,
+  private List<ServerName> filterServers(Collection<Address> servers,
       Collection<ServerName> onlineServers) {
     ArrayList<ServerName> finalList = new ArrayList<ServerName>();
-    for (HostAndPort server : servers) {
+    for (Address server : servers) {
       for(ServerName curr: onlineServers) {
-        if(curr.getHostPort().equals(server)) {
+        if(curr.getAddress().equals(server)) {
           finalList.add(curr);
         }
       }
@@ -293,17 +291,6 @@ public class RSGroupBasedLoadBalancer implements RSGroupableBalancer {
     return finalList;
   }
 
-  private ListMultimap<String, HRegionInfo> groupRegions(
-      List<HRegionInfo> regionList) throws IOException {
-    ListMultimap<String, HRegionInfo> regionGroup = ArrayListMultimap
-        .create();
-    for (HRegionInfo region : regionList) {
-      String groupName = RSGroupInfoManager.getRSGroupOfTable(region.getTable());
-      regionGroup.put(groupName, region);
-    }
-    return regionGroup;
-  }
-
   private Set<HRegionInfo> getMisplacedRegions(
       Map<HRegionInfo, ServerName> regions) throws IOException {
     Set<HRegionInfo> misplacedRegions = new HashSet<HRegionInfo>();
@@ -312,11 +299,11 @@ public class RSGroupBasedLoadBalancer implements RSGroupableBalancer {
       RSGroupInfo info =
           RSGroupInfoManager.getRSGroup(RSGroupInfoManager.getRSGroupOfTable(region.getTable()));
       if (assignedServer != null &&
-          (info == null || !info.containsServer(assignedServer.getHostPort()))) {
+          (info == null || !info.containsServer(assignedServer.getAddress()))) {
         LOG.debug("Found misplaced region: " + region.getRegionNameAsString() +
             " on server: " + assignedServer +
             " found in group: " +
-            RSGroupInfoManager.getRSGroupOfServer(assignedServer.getHostPort()) +
+            RSGroupInfoManager.getRSGroupOfServer(assignedServer.getAddress()) +
             " outside of group: " + info.getName());
         misplacedRegions.add(region);
       }
@@ -342,7 +329,7 @@ public class RSGroupBasedLoadBalancer implements RSGroupableBalancer {
           LOG.debug("Group information null for region of table " + region.getTable(),
               exp);
         }
-        if ((info == null) || (!info.containsServer(sName.getHostPort()))) {
+        if ((info == null) || (!info.containsServer(sName.getAddress()))) {
           correctAssignments.get(LoadBalancer.BOGUS_SERVER_NAME).add(region);
         } else {
           correctAssignments.get(sName).add(region);
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManager.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManager.java
index 434c85f..759f827 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManager.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManager.java
@@ -1,6 +1,4 @@
 /**
- * Copyright The Apache Software Foundation
- *
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -20,21 +18,22 @@
 
 package org.apache.hadoop.hbase.rsgroup;
 
-import com.google.common.net.HostAndPort;
-
 import java.io.IOException;
 import java.util.List;
 import java.util.Set;
 
 import org.apache.hadoop.hbase.NamespaceDescriptor;
 import org.apache.hadoop.hbase.TableName;
+import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.util.Bytes;
+import org.apache.hadoop.hbase.util.Address;
 
 /**
  * Interface used to manage RSGroupInfo storage. An implementation
  * has the option to support offline mode.
  * See {@link RSGroupBasedLoadBalancer}
  */
+@InterfaceAudience.Private
 public interface RSGroupInfoManager {
   //Assigned before user tables
   public static final TableName RSGROUP_TABLE_NAME =
@@ -70,7 +69,7 @@ public interface RSGroupInfoManager {
    * @return true if move was successful
    * @throws java.io.IOException on move failure
    */
-  boolean moveServers(Set<HostAndPort> hostPorts,
+  boolean moveServers(Set<Address> hostPorts,
                       String srcGroup, String dstGroup) throws IOException;
 
   /**
@@ -79,7 +78,7 @@ public interface RSGroupInfoManager {
    * @param hostPort the server
    * @return An instance of RSGroupInfo
    */
-  RSGroupInfo getRSGroupOfServer(HostAndPort hostPort) throws IOException;
+  RSGroupInfo getRSGroupOfServer(Address hostPort) throws IOException;
 
   /**
    * Gets the group information.
@@ -129,4 +128,4 @@ public interface RSGroupInfoManager {
    * @return whether the manager is in online mode
    */
   boolean isOnline();
-}
+}
\ No newline at end of file
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManagerImpl.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManagerImpl.java
index e0ae774..504cfda 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManagerImpl.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManagerImpl.java
@@ -1,6 +1,4 @@
 /**
- * Copyright The Apache Software Foundation
- *
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -24,7 +22,6 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 
 import com.google.common.collect.Sets;
-import com.google.common.net.HostAndPort;
 import com.google.protobuf.ServiceException;
 
 import java.io.IOException;
@@ -54,6 +51,7 @@ import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.hbase.MetaTableAccessor;
 import org.apache.hadoop.hbase.MetaTableAccessor.DefaultVisitorBase;
+import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.NamespaceDescriptor;
 import org.apache.hadoop.hbase.ServerName;
 import org.apache.hadoop.hbase.TableName;
@@ -81,6 +79,7 @@ import org.apache.hadoop.hbase.protobuf.generated.ZooKeeperProtos;
 import org.apache.hadoop.hbase.regionserver.DisabledRegionSplitPolicy;
 import org.apache.hadoop.hbase.security.access.AccessControlLists;
 import org.apache.hadoop.hbase.util.Bytes;
+import org.apache.hadoop.hbase.util.Address;
 import org.apache.hadoop.hbase.util.ModifyRegionUtils;
 import org.apache.hadoop.hbase.zookeeper.ZKUtil;
 import org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher;
@@ -91,7 +90,12 @@ import org.apache.zookeeper.KeeperException;
  * use of an HBase table as the persistence store for the group information.
  * It also makes use of zookeeper to store group information needed
  * for bootstrapping during offline mode.
+ * 
+ * <p>Only one modifier is allowed at a time so all access is synchronized.
+ * We do this to protect data member Maps but also so only one writer of
+ * persisted state out to zk where we keep cache.
  */
+@InterfaceAudience.Private
 public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListener {
   private static final Log LOG = LogFactory.getLog(RSGroupInfoManagerImpl.class);
 
@@ -157,7 +161,7 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
   }
 
   @Override
-  public synchronized boolean moveServers(Set<HostAndPort> hostPorts, String srcGroup,
+  public synchronized boolean moveServers(Set<Address> hostPorts, String srcGroup,
                                           String dstGroup) throws IOException {
     if (!rsGroupMap.containsKey(srcGroup)) {
       throw new DoNotRetryIOException("Group "+srcGroup+" does not exist");
@@ -169,7 +173,7 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
     RSGroupInfo src = new RSGroupInfo(getRSGroup(srcGroup));
     RSGroupInfo dst = new RSGroupInfo(getRSGroup(dstGroup));
     boolean foundOne = false;
-    for(HostAndPort el: hostPorts) {
+    for(Address el: hostPorts) {
       foundOne = src.removeServer(el) || foundOne;
       dst.addServer(el);
     }
@@ -189,7 +193,8 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
    * @return An instance of GroupInfo.
    */
   @Override
-  public RSGroupInfo getRSGroupOfServer(HostAndPort hostPort) throws IOException {
+  public synchronized RSGroupInfo getRSGroupOfServer(Address hostPort)
+  throws IOException {
     for (RSGroupInfo info : rsGroupMap.values()) {
       if (info.containsServer(hostPort)){
         return info;
@@ -206,15 +211,14 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
    * @return An instance of GroupInfo
    */
   @Override
-  public RSGroupInfo getRSGroup(String groupName) throws IOException {
-    RSGroupInfo RSGroupInfo = rsGroupMap.get(groupName);
-    return RSGroupInfo;
+  public synchronized RSGroupInfo getRSGroup(String groupName) throws IOException {
+    return this.rsGroupMap.get(groupName);
   }
 
 
 
   @Override
-  public String getRSGroupOfTable(TableName tableName) throws IOException {
+  public synchronized String getRSGroupOfTable(TableName tableName) throws IOException {
     return tableMap.get(tableName);
   }
 
@@ -260,13 +264,12 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
   }
 
   @Override
-  public List<RSGroupInfo> listRSGroups() throws IOException {
-    List<RSGroupInfo> list = Lists.newLinkedList(rsGroupMap.values());
-    return list;
+  public synchronized List<RSGroupInfo> listRSGroups() throws IOException {
+    return Lists.newLinkedList(rsGroupMap.values());
   }
 
   @Override
-  public boolean isOnline() {
+  public synchronized boolean isOnline() {
     return rsGroupStartupWorker.isOnline();
   }
 
@@ -326,7 +329,6 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
         Sets.newHashSet(getDefaultServers()),
         orphanTables));
 
-
     // populate the data
     HashMap<String, RSGroupInfo> newGroupMap = Maps.newHashMap();
     HashMap<TableName, String> newTableMap = Maps.newHashMap();
@@ -452,10 +454,10 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
     }
   }
 
-  private List<HostAndPort> getDefaultServers() throws IOException {
-    List<HostAndPort> defaultServers = new LinkedList<HostAndPort>();
+  private List<Address> getDefaultServers() throws IOException {
+    List<Address> defaultServers = new LinkedList<>();
     for(ServerName server : getOnlineRS()) {
-      HostAndPort hostPort = HostAndPort.fromParts(server.getHostname(), server.getPort());
+      Address hostPort = Address.fromParts(server.getHostname(), server.getPort());
       boolean found = false;
       for(RSGroupInfo RSGroupInfo : rsGroupMap.values()) {
         if(!RSGroupInfo.DEFAULT_GROUP.equals(RSGroupInfo.getName()) &&
@@ -472,7 +474,7 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
   }
 
   private synchronized void updateDefaultServers(
-      Set<HostAndPort> hostPort) throws IOException {
+      Set<Address> hostPort) throws IOException {
     RSGroupInfo info = rsGroupMap.get(RSGroupInfo.DEFAULT_GROUP);
     RSGroupInfo newInfo = new RSGroupInfo(info.getName(), hostPort, info.getTables());
     HashMap<String, RSGroupInfo> newGroupMap = Maps.newHashMap(rsGroupMap);
@@ -482,11 +484,13 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
 
   @Override
   public void serverAdded(ServerName serverName) {
+    // #serverChanged is internally synchronized
     defaultServerUpdater.serverChanged();
   }
 
   @Override
   public void serverRemoved(ServerName serverName) {
+    // #serverChanged is internally synchronized
     defaultServerUpdater.serverChanged();
   }
 
@@ -501,15 +505,15 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
 
     @Override
     public void run() {
-      List<HostAndPort> prevDefaultServers = new LinkedList<HostAndPort>();
+      List<Address> prevDefaultServers = new LinkedList<>();
       while(!mgr.master.isAborted() || !mgr.master.isStopped()) {
         try {
           LOG.info("Updating default servers.");
-          List<HostAndPort> servers = mgr.getDefaultServers();
-          Collections.sort(servers, new Comparator<HostAndPort>() {
+          List<Address> servers = mgr.getDefaultServers();
+          Collections.sort(servers, new Comparator<Address>() {
             @Override
-            public int compare(HostAndPort o1, HostAndPort o2) {
-              int diff = o1.getHostText().compareTo(o2.getHostText());
+            public int compare(Address o1, Address o2) {
+              int diff = o1.getHostname().compareTo(o2.getHostname());
               if (diff != 0) {
                 return diff;
               }
@@ -517,7 +521,7 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
             }
           });
           if(!servers.equals(prevDefaultServers)) {
-            mgr.updateDefaultServers(Sets.<HostAndPort>newHashSet(servers));
+            mgr.updateDefaultServers(Sets.<Address>newHashSet(servers));
             prevDefaultServers = servers;
             LOG.info("Updated with servers: "+servers.size());
           }
@@ -752,4 +756,4 @@ public class RSGroupInfoManagerImpl implements RSGroupInfoManager, ServerListene
       throw new ConstraintException("Group name should only contain alphanumeric characters");
     }
   }
-}
+}
\ No newline at end of file
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupSerDe.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupSerDe.java
index 530db58..c98984a 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupSerDe.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupSerDe.java
@@ -1,6 +1,4 @@
 /**
- * Copyright The Apache Software Foundation
- *
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -28,6 +26,7 @@ import java.util.List;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Table;
@@ -39,6 +38,7 @@ import org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher;
 import org.apache.zookeeper.KeeperException;
 
 //TODO do better encapsulation of SerDe logic from GroupInfoManager and GroupTracker
+@InterfaceAudience.Private
 public class RSGroupSerDe {
   private static final Log LOG = LogFactory.getLog(RSGroupSerDe.class);
 
@@ -85,4 +85,4 @@ public class RSGroupSerDe {
     }
     return RSGroupInfoList;
   }
-}
+}
\ No newline at end of file
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupableBalancer.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupableBalancer.java
index ec86dda..bff392b 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupableBalancer.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupableBalancer.java
@@ -1,6 +1,4 @@
 /**
- * Copyright The Apache Software Foundation
- *
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -23,7 +21,9 @@ package org.apache.hadoop.hbase.rsgroup;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.master.LoadBalancer;
 
-
+/**
+ * Marker Interface. RSGroups feature will check for a LoadBalancer
+ * marked with this Interface before it runs.
+ */
 @InterfaceAudience.Private
-public interface RSGroupableBalancer extends LoadBalancer {
-}
+public interface RSGroupableBalancer extends LoadBalancer {}
\ No newline at end of file
diff --git a/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/master/balancer/TestRSGroupBasedLoadBalancer.java b/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/master/balancer/TestRSGroupBasedLoadBalancer.java
index 1539f73..4bbb146 100644
--- a/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/master/balancer/TestRSGroupBasedLoadBalancer.java
+++ b/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/master/balancer/TestRSGroupBasedLoadBalancer.java
@@ -1,6 +1,4 @@
 /**
- * Copyright The Apache Software Foundation
- *
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -21,7 +19,6 @@ package org.apache.hadoop.hbase.master.balancer;
 
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.Lists;
-import com.google.common.net.HostAndPort;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -40,6 +37,7 @@ import org.apache.hadoop.hbase.master.HMaster;
 import org.apache.hadoop.hbase.master.MasterServices;
 import org.apache.hadoop.hbase.master.RegionPlan;
 import org.apache.hadoop.hbase.testclassification.SmallTests;
+import org.apache.hadoop.hbase.util.Address;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -181,7 +179,7 @@ public class TestRSGroupBasedLoadBalancer {
       assertTrue(StringUtils.isNotEmpty(groupName));
       RSGroupInfo gInfo = getMockedGroupInfoManager().getRSGroup(groupName);
       assertTrue("Region is not correctly assigned to group servers.",
-          gInfo.containsServer(server.getHostPort()));
+          gInfo.containsServer(server.getAddress()));
     }
   }
 
@@ -216,7 +214,7 @@ public class TestRSGroupBasedLoadBalancer {
             groupName);
         assertTrue(
             "Region is not correctly assigned to group servers.",
-            gInfo.containsServer(sn.getHostPort()));
+            gInfo.containsServer(sn.getAddress()));
       }
     }
     ArrayListMultimap<String, ServerAndLoad> loadMap = convertToGroupBasedMap(assignments);
@@ -295,15 +293,15 @@ public class TestRSGroupBasedLoadBalancer {
             groupName);
         assertTrue(
             "Region is not correctly assigned to group servers.",
-            gInfo.containsServer(currentServer.getHostPort()));
+            gInfo.containsServer(currentServer.getAddress()));
         if (oldAssignedServer != null
             && onlineHostNames.contains(oldAssignedServer
             .getHostname())) {
           // this region was previously assigned somewhere, and that
           // host is still around, then the host must have been is a
           // different group.
-          if (!oldAssignedServer.getHostPort().equals(currentServer.getHostPort())) {
-            assertFalse(gInfo.containsServer(oldAssignedServer.getHostPort()));
+          if (!oldAssignedServer.getAddress().equals(currentServer.getAddress())) {
+            assertFalse(gInfo.containsServer(oldAssignedServer.getAddress()));
           }
         }
       }
@@ -346,11 +344,11 @@ public class TestRSGroupBasedLoadBalancer {
     ArrayListMultimap<String, ServerAndLoad> loadMap = ArrayListMultimap
         .create();
     for (RSGroupInfo gInfo : getMockedGroupInfoManager().listRSGroups()) {
-      Set<HostAndPort> groupServers = gInfo.getServers();
-      for (HostAndPort hostPort : groupServers) {
+      Set<Address> groupServers = gInfo.getServers();
+      for (Address hostPort : groupServers) {
         ServerName actual = null;
         for(ServerName entry: servers) {
-          if(entry.getHostPort().equals(hostPort)) {
+          if(entry.getAddress().equals(hostPort)) {
             actual = entry;
             break;
           }
@@ -486,14 +484,14 @@ public class TestRSGroupBasedLoadBalancer {
     Map<String, RSGroupInfo> groupMap = new HashMap<String, RSGroupInfo>();
     for (String grpName : groups) {
       RSGroupInfo RSGroupInfo = new RSGroupInfo(grpName);
-      RSGroupInfo.addServer(servers.get(index).getHostPort());
+      RSGroupInfo.addServer(servers.get(index).getAddress());
       groupMap.put(grpName, RSGroupInfo);
       index++;
     }
     while (index < servers.size()) {
       int grpIndex = rand.nextInt(groups.length);
       groupMap.get(groups[grpIndex]).addServer(
-          servers.get(index).getHostPort());
+          servers.get(index).getAddress());
       index++;
     }
     return groupMap;
@@ -558,7 +556,7 @@ public class TestRSGroupBasedLoadBalancer {
     RSGroupInfoManager gm = getMockedGroupInfoManager();
     RSGroupInfo groupOfServer = null;
     for(RSGroupInfo gInfo : gm.listRSGroups()){
-      if(gInfo.containsServer(sn.getHostPort())){
+      if(gInfo.containsServer(sn.getAddress())){
         groupOfServer = gInfo;
         break;
       }
diff --git a/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroups.java b/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroups.java
index 34add63..7c14a23 100644
--- a/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroups.java
+++ b/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroups.java
@@ -1,6 +1,4 @@
 /**
- * Copyright The Apache Software Foundation
- *
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -19,10 +17,13 @@
  */
 package org.apache.hadoop.hbase.rsgroup;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+import java.io.IOException;
+import java.util.Iterator;
 
-import com.google.common.net.HostAndPort;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hbase.HBaseTestingUtility;
@@ -37,11 +38,11 @@ import org.apache.hadoop.hbase.Waiter;
 import org.apache.hadoop.hbase.Waiter.Predicate;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.master.HMaster;
-import org.apache.hadoop.hbase.master.MasterServices;
 import org.apache.hadoop.hbase.master.ServerManager;
 import org.apache.hadoop.hbase.protobuf.ProtobufUtil;
 import org.apache.hadoop.hbase.protobuf.generated.AdminProtos;
 import org.apache.hadoop.hbase.testclassification.MediumTests;
+import org.apache.hadoop.hbase.util.Address;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.junit.After;
 import org.junit.AfterClass;
@@ -50,22 +51,8 @@ import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
-import org.mockito.Mockito;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
 
-import javax.management.MBeanServer;
-import javax.management.ObjectName;
-import java.io.IOException;
-import java.lang.management.ManagementFactory;
-import java.util.Iterator;
-import java.util.List;
-import java.util.concurrent.atomic.AtomicReference;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
+import com.google.common.collect.Sets;
 
 @Category({MediumTests.class})
 public class TestRSGroups extends TestRSGroupsBase {
@@ -104,14 +91,15 @@ public class TestRSGroups extends TestRSGroupsBase {
       }
     });
     admin.setBalancerRunning(false,true);
-    rsGroupAdmin = new VerifyingRSGroupAdminClient(rsGroupAdmin.newClient(TEST_UTIL.getConnection()),
-        TEST_UTIL.getConfiguration());
+    rsGroupAdmin = new VerifyingRSGroupAdminClient(
+        new RSGroupAdminClient(TEST_UTIL.getConnection()), TEST_UTIL.getConfiguration());
     RSGroupAdminEndpoint =
         master.getMasterCoprocessorHost().findCoprocessors(RSGroupAdminEndpoint.class).get(0);
   }
 
   @AfterClass
   public static void tearDown() throws Exception {
+    rsGroupAdmin.close();
     TEST_UTIL.shutdownMiniCluster();
   }
 
@@ -142,7 +130,7 @@ public class TestRSGroups extends TestRSGroupsBase {
 
     try {
       rsGroupAdmin.moveServers(
-          Sets.newHashSet(masterServerName.getHostPort()),
+          Sets.newHashSet(masterServerName.getAddress()),
           "master");
     } catch (Exception ex) {
       // ignore
@@ -254,7 +242,7 @@ public class TestRSGroups extends TestRSGroupsBase {
     final RSGroupInfo defaultGroup = manager.getRSGroup("default");
     // getRSGroup updates default group's server list
     // this process must not affect other threads iterating the list
-    Iterator<HostAndPort> it = defaultGroup.getServers().iterator();
+    Iterator<Address> it = defaultGroup.getServers().iterator();
     manager.getRSGroup("default");
     it.next();
   }
diff --git a/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsBase.java b/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsBase.java
index 9225e09..81be4d2 100644
--- a/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsBase.java
+++ b/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsBase.java
@@ -1,6 +1,4 @@
 /**
- * Copyright The Apache Software Foundation
- *
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -19,9 +17,21 @@
  */
 package org.apache.hadoop.hbase.rsgroup;
 
-import com.google.common.collect.Maps;
-import com.google.common.collect.Sets;
-import com.google.common.net.HostAndPort;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+import java.io.IOException;
+import java.security.SecureRandom;
+import java.util.HashSet;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hbase.ClusterStatus;
@@ -39,23 +49,13 @@ import org.apache.hadoop.hbase.client.HBaseAdmin;
 import org.apache.hadoop.hbase.constraint.ConstraintException;
 import org.apache.hadoop.hbase.protobuf.ProtobufUtil;
 import org.apache.hadoop.hbase.protobuf.generated.AdminProtos;
+import org.apache.hadoop.hbase.util.Address;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.junit.Assert;
 import org.junit.Test;
 
-import java.io.IOException;
-import java.security.SecureRandom;
-import java.util.HashSet;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeMap;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
 
 public abstract class TestRSGroupsBase {
   protected static final Log LOG = LogFactory.getLog(TestRSGroupsBase.class);
@@ -84,8 +84,8 @@ public abstract class TestRSGroupsBase {
     assertTrue(defaultInfo.getServers().size() >= serverCount);
     gAdmin.addRSGroup(groupName);
 
-    Set<HostAndPort> set = new HashSet<HostAndPort>();
-    for(HostAndPort server: defaultInfo.getServers()) {
+    Set<Address> set = new HashSet<Address>();
+    for(Address server: defaultInfo.getServers()) {
       if(set.size() == serverCount) {
         break;
       }
@@ -119,12 +119,14 @@ public abstract class TestRSGroupsBase {
   }
 
   protected void deleteGroups() throws IOException {
-    RSGroupAdmin groupAdmin = rsGroupAdmin.newClient(TEST_UTIL.getConnection());
-    for(RSGroupInfo group: groupAdmin.listRSGroups()) {
-      if(!group.getName().equals(RSGroupInfo.DEFAULT_GROUP)) {
-        groupAdmin.moveTables(group.getTables(), RSGroupInfo.DEFAULT_GROUP);
-        groupAdmin.moveServers(group.getServers(), RSGroupInfo.DEFAULT_GROUP);
-        groupAdmin.removeRSGroup(group.getName());
+    try (RSGroupAdmin groupAdmin =
+        new RSGroupAdminClient(TEST_UTIL.getConnection())) {
+      for(RSGroupInfo group: groupAdmin.listRSGroups()) {
+        if(!group.getName().equals(RSGroupInfo.DEFAULT_GROUP)) {
+          groupAdmin.moveTables(group.getTables(), RSGroupInfo.DEFAULT_GROUP);
+          groupAdmin.moveServers(group.getServers(), RSGroupInfo.DEFAULT_GROUP);
+          groupAdmin.removeRSGroup(group.getName());
+        }
       }
     }
   }
@@ -166,7 +168,7 @@ public abstract class TestRSGroupsBase {
   @Test
   public void testBogusArgs() throws Exception {
     assertNull(rsGroupAdmin.getRSGroupInfoOfTable(TableName.valueOf("nonexistent")));
-    assertNull(rsGroupAdmin.getRSGroupOfServer(HostAndPort.fromParts("bogus",123)));
+    assertNull(rsGroupAdmin.getRSGroupOfServer(Address.fromParts("bogus",123)));
     assertNull(rsGroupAdmin.getRSGroupInfo("bogus"));
 
     try {
@@ -184,7 +186,7 @@ public abstract class TestRSGroupsBase {
     }
 
     try {
-      rsGroupAdmin.moveServers(Sets.newHashSet(HostAndPort.fromParts("bogus",123)), "bogus");
+      rsGroupAdmin.moveServers(Sets.newHashSet(Address.fromParts("bogus",123)), "bogus");
       fail("Expected move with bogus group to fail");
     } catch(ConstraintException ex) {
       //expected
@@ -275,7 +277,7 @@ public abstract class TestRSGroupsBase {
 
     //test fail bogus server move
     try {
-      rsGroupAdmin.moveServers(Sets.newHashSet(HostAndPort.fromString("foo:9999")),"foo");
+      rsGroupAdmin.moveServers(Sets.newHashSet(Address.fromString("foo:9999")),"foo");
       fail("Bogus servers shouldn't have been successfully moved.");
     } catch(IOException ex) {
       String exp = "Server foo:9999 does not have a group.";
@@ -353,7 +355,7 @@ public abstract class TestRSGroupsBase {
         int count = 0;
         if (serverMap != null) {
           for (ServerName rs : serverMap.keySet()) {
-            if (newGroup.containsServer(rs.getHostPort())) {
+            if (newGroup.containsServer(rs.getAddress())) {
               count += serverMap.get(rs).size();
             }
           }
@@ -475,7 +477,7 @@ public abstract class TestRSGroupsBase {
     //get server which is not a member of new group
     ServerName targetServer = null;
     for(ServerName server : admin.getClusterStatus().getServers()) {
-      if(!newGroup.containsServer(server.getHostPort())) {
+      if(!newGroup.containsServer(server.getAddress())) {
         targetServer = server;
         break;
       }
@@ -485,7 +487,7 @@ public abstract class TestRSGroupsBase {
         admin.getConnection().getAdmin(targetServer);
 
     //move target server to group
-    rsGroupAdmin.moveServers(Sets.newHashSet(targetServer.getHostPort()),
+    rsGroupAdmin.moveServers(Sets.newHashSet(targetServer.getAddress()),
         newGroup.getName());
     TEST_UTIL.waitFor(WAIT_TIMEOUT, new Waiter.Predicate<Exception>() {
       @Override
@@ -591,7 +593,7 @@ public abstract class TestRSGroupsBase {
         return cluster.getClusterStatus().getRegionsInTransition().size() == 0;
       }
     });
-    Set<HostAndPort> newServers = Sets.newHashSet();
+    Set<Address> newServers = Sets.newHashSet();
     newServers.add(
         rsGroupAdmin.getRSGroupInfo(RSGroupInfo.DEFAULT_GROUP).getServers().iterator().next());
     rsGroupAdmin.moveServers(newServers, appInfo.getName());
diff --git a/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsOfflineMode.java b/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsOfflineMode.java
index b89ea0e..bdb5163 100644
--- a/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsOfflineMode.java
+++ b/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsOfflineMode.java
@@ -1,6 +1,4 @@
 /**
- * Copyright The Apache Software Foundation
- *
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -100,50 +98,48 @@ public class TestRSGroupsOfflineMode {
     //so it gets assigned later
     final TableName failoverTable = TableName.valueOf("testOffline");
     TEST_UTIL.createTable(failoverTable, Bytes.toBytes("f"));
-
-    RSGroupAdmin groupAdmin = RSGroupAdmin.newClient(TEST_UTIL.getConnection());
-
     final HRegionServer killRS = ((MiniHBaseCluster)cluster).getRegionServer(0);
     final HRegionServer groupRS = ((MiniHBaseCluster)cluster).getRegionServer(1);
     final HRegionServer failoverRS = ((MiniHBaseCluster)cluster).getRegionServer(2);
-
     String newGroup =  "my_group";
-    groupAdmin.addRSGroup(newGroup);
-    if(master.getAssignmentManager().getRegionStates().getRegionAssignments()
-        .containsValue(failoverRS.getServerName())) {
-      for(HRegionInfo regionInfo: hbaseAdmin.getOnlineRegions(failoverRS.getServerName())) {
-        hbaseAdmin.move(regionInfo.getEncodedNameAsBytes(),
-            Bytes.toBytes(failoverRS.getServerName().getServerName()));
+    try (RSGroupAdmin groupAdmin = new RSGroupAdminClient(TEST_UTIL.getConnection())) {
+      groupAdmin.addRSGroup(newGroup);
+      if(master.getAssignmentManager().getRegionStates().getRegionAssignments()
+          .containsValue(failoverRS.getServerName())) {
+        for(HRegionInfo regionInfo: hbaseAdmin.getOnlineRegions(failoverRS.getServerName())) {
+          hbaseAdmin.move(regionInfo.getEncodedNameAsBytes(),
+              Bytes.toBytes(failoverRS.getServerName().getServerName()));
+        }
+        LOG.info("Waiting for region unassignments on failover RS...");
+        TEST_UTIL.waitFor(WAIT_TIMEOUT, new Waiter.Predicate<Exception>() {
+          @Override
+          public boolean evaluate() throws Exception {
+            return master.getServerManager().getLoad(failoverRS.getServerName())
+                .getRegionsLoad().size() > 0;
+          }
+        });
       }
-      LOG.info("Waiting for region unassignments on failover RS...");
+
+      //move server to group and make sure all tables are assigned
+      groupAdmin.moveServers(Sets.newHashSet(groupRS.getServerName().getAddress()), newGroup);
+      TEST_UTIL.waitFor(WAIT_TIMEOUT, new Waiter.Predicate<Exception>() {
+        @Override
+        public boolean evaluate() throws Exception {
+          return groupRS.getNumberOfOnlineRegions() < 1 &&
+              master.getAssignmentManager().getRegionStates().getRegionsInTransition().size() < 1;
+        }
+      });
+      //move table to group and wait
+      groupAdmin.moveTables(Sets.newHashSet(RSGroupInfoManager.RSGROUP_TABLE_NAME), newGroup);
+      LOG.info("Waiting for move table...");
       TEST_UTIL.waitFor(WAIT_TIMEOUT, new Waiter.Predicate<Exception>() {
         @Override
         public boolean evaluate() throws Exception {
-          return master.getServerManager().getLoad(failoverRS.getServerName())
-              .getRegionsLoad().size() > 0;
+          return groupRS.getNumberOfOnlineRegions() == 1;
         }
       });
     }
 
-    //move server to group and make sure all tables are assigned
-    groupAdmin.moveServers(Sets.newHashSet(groupRS.getServerName().getHostPort()), newGroup);
-    TEST_UTIL.waitFor(WAIT_TIMEOUT, new Waiter.Predicate<Exception>() {
-      @Override
-      public boolean evaluate() throws Exception {
-        return groupRS.getNumberOfOnlineRegions() < 1 &&
-            master.getAssignmentManager().getRegionStates().getRegionsInTransition().size() < 1;
-      }
-    });
-    //move table to group and wait
-    groupAdmin.moveTables(Sets.newHashSet(RSGroupInfoManager.RSGROUP_TABLE_NAME), newGroup);
-    LOG.info("Waiting for move table...");
-    TEST_UTIL.waitFor(WAIT_TIMEOUT, new Waiter.Predicate<Exception>() {
-      @Override
-      public boolean evaluate() throws Exception {
-        return groupRS.getNumberOfOnlineRegions() == 1;
-      }
-    });
-
     groupRS.stop("die");
     //race condition here
     TEST_UTIL.getHBaseCluster().getMaster().stopMaster();
diff --git a/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/VerifyingRSGroupAdminClient.java b/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/VerifyingRSGroupAdminClient.java
index d1f4898..0241dc5 100644
--- a/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/VerifyingRSGroupAdminClient.java
+++ b/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/VerifyingRSGroupAdminClient.java
@@ -1,6 +1,4 @@
 /**
- * Copyright The Apache Software Foundation
- *
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -21,9 +19,9 @@ package org.apache.hadoop.hbase.rsgroup;
 
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import com.google.common.net.HostAndPort;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.TableName;
+import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.client.ConnectionFactory;
 import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.Scan;
@@ -31,6 +29,7 @@ import org.apache.hadoop.hbase.client.Table;
 import org.apache.hadoop.hbase.exceptions.DeserializationException;
 import org.apache.hadoop.hbase.protobuf.ProtobufUtil;
 import org.apache.hadoop.hbase.protobuf.generated.RSGroupProtos;
+import org.apache.hadoop.hbase.util.Address;
 import org.apache.hadoop.hbase.zookeeper.ZKUtil;
 import org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher;
 import org.apache.zookeeper.KeeperException;
@@ -42,10 +41,10 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-public class VerifyingRSGroupAdminClient extends RSGroupAdmin {
+@InterfaceAudience.Private
+public class VerifyingRSGroupAdminClient implements RSGroupAdmin {
   private Table table;
   private ZooKeeperWatcher zkw;
-  private RSGroupSerDe serDe;
   private RSGroupAdmin wrapped;
 
   public VerifyingRSGroupAdminClient(RSGroupAdmin RSGroupAdmin, Configuration conf)
@@ -53,7 +52,6 @@ public class VerifyingRSGroupAdminClient extends RSGroupAdmin {
     wrapped = RSGroupAdmin;
     table = ConnectionFactory.createConnection(conf).getTable(RSGroupInfoManager.RSGROUP_TABLE_NAME);
     zkw = new ZooKeeperWatcher(conf, this.getClass().getSimpleName(), null);
-    serDe = new RSGroupSerDe();
   }
 
   @Override
@@ -73,7 +71,7 @@ public class VerifyingRSGroupAdminClient extends RSGroupAdmin {
   }
 
   @Override
-  public void moveServers(Set<HostAndPort> servers, String targetGroup) throws IOException {
+  public void moveServers(Set<Address> servers, String targetGroup) throws IOException {
     wrapped.moveServers(servers, targetGroup);
     verify();
   }
@@ -101,7 +99,7 @@ public class VerifyingRSGroupAdminClient extends RSGroupAdmin {
   }
 
   @Override
-  public RSGroupInfo getRSGroupOfServer(HostAndPort hostPort) throws IOException {
+  public RSGroupInfo getRSGroupOfServer(Address hostPort) throws IOException {
     return wrapped.getRSGroupOfServer(hostPort);
   }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterAndRegionObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterAndRegionObserver.java
index 4ea82f9..470ac4e 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterAndRegionObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterAndRegionObserver.java
@@ -35,8 +35,7 @@ import org.apache.hadoop.hbase.master.procedure.MasterProcedureEnv;
 import org.apache.hadoop.hbase.procedure2.ProcedureExecutor;
 import org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.SnapshotDescription;
 import org.apache.hadoop.hbase.protobuf.generated.QuotaProtos.Quotas;
-
-import com.google.common.net.HostAndPort;
+import org.apache.hadoop.hbase.util.Address;
 
 import java.io.IOException;
 import java.util.List;
@@ -569,7 +568,7 @@ public abstract class BaseMasterAndRegionObserver extends BaseRegionObserver
   }
 
   @Override
-  public void postMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx, Set<HostAndPort>
+  public void postMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx, Set<Address>
       servers, String targetGroup) throws IOException {
   }
 
@@ -595,7 +594,7 @@ public abstract class BaseMasterAndRegionObserver extends BaseRegionObserver
 
   @Override
   public void preMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx,
-      Set<HostAndPort> servers, String targetGroup) throws IOException {
+      Set<Address> servers, String targetGroup) throws IOException {
   }
 
   @Override
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterObserver.java
index d403813..84728bd 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterObserver.java
@@ -35,8 +35,7 @@ import org.apache.hadoop.hbase.master.procedure.MasterProcedureEnv;
 import org.apache.hadoop.hbase.procedure2.ProcedureExecutor;
 import org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.SnapshotDescription;
 import org.apache.hadoop.hbase.protobuf.generated.QuotaProtos.Quotas;
-
-import com.google.common.net.HostAndPort;
+import org.apache.hadoop.hbase.util.Address;
 
 import java.io.IOException;
 import java.util.List;
@@ -563,12 +562,12 @@ public class BaseMasterObserver implements MasterObserver {
   }
 
   @Override
-  public void preMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx, Set<HostAndPort>
+  public void preMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx, Set<Address>
       servers, String targetGroup) throws IOException {
   }
 
   @Override
-  public void postMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx, Set<HostAndPort>
+  public void postMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx, Set<Address>
       servers, String targetGroup) throws IOException {
   }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterObserver.java
index 5e36f3f..b645bec 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterObserver.java
@@ -19,8 +19,6 @@
 
 package org.apache.hadoop.hbase.coprocessor;
 
-import com.google.common.net.HostAndPort;
-
 import java.io.IOException;
 import java.util.List;
 import java.util.Set;
@@ -41,6 +39,7 @@ import org.apache.hadoop.hbase.master.procedure.MasterProcedureEnv;
 import org.apache.hadoop.hbase.procedure2.ProcedureExecutor;
 import org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.SnapshotDescription;
 import org.apache.hadoop.hbase.protobuf.generated.QuotaProtos.Quotas;
+import org.apache.hadoop.hbase.util.Address;
 
 /**
  * Defines coprocessor hooks for interacting with operations on the
@@ -1016,7 +1015,7 @@ public interface MasterObserver extends Coprocessor {
    * @throws IOException on failure
    */
   void preMoveServers(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-                      Set<HostAndPort> servers, String targetGroup) throws IOException;
+                      Set<Address> servers, String targetGroup) throws IOException;
 
   /**
    * Called after servers are moved to target region server group
@@ -1026,7 +1025,7 @@ public interface MasterObserver extends Coprocessor {
    * @throws IOException on failure
    */
   void postMoveServers(final ObserverContext<MasterCoprocessorEnvironment> ctx,
-                       Set<HostAndPort> servers, String targetGroup) throws IOException;
+                       Set<Address> servers, String targetGroup) throws IOException;
 
   /**
    * Called before tables are moved to target region server group
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java
index c333848..4cf5ac3 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java
@@ -129,7 +129,7 @@ public class AssignmentManager extends ZooKeeperListener {
   private static final Log LOG = LogFactory.getLog(AssignmentManager.class);
 
   public static final ServerName HBCK_CODE_SERVERNAME = ServerName.valueOf(HConstants.HBCK_CODE_NAME,
-      -1, -1L);
+      0, -1L);
 
   static final String ALREADY_IN_TRANSITION_WAITTIME
     = "hbase.assignment.already.intransition.waittime";
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java
index 441f03c..bf51a9c 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java
@@ -21,9 +21,6 @@ package org.apache.hadoop.hbase.master;
 import java.util.List;
 import java.util.Map;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
-import org.apache.hadoop.hbase.classification.InterfaceAudience;
-import org.apache.hadoop.hbase.conf.ConfigurationObserver;
 import org.apache.hadoop.conf.Configurable;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.ClusterStatus;
@@ -31,6 +28,8 @@ import org.apache.hadoop.hbase.HBaseIOException;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.ServerName;
 import org.apache.hadoop.hbase.Stoppable;
+import org.apache.hadoop.hbase.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.conf.ConfigurationObserver;
 
 /**
  * Makes decisions about the placement and movement of Regions across
@@ -52,7 +51,7 @@ import org.apache.hadoop.hbase.Stoppable;
 public interface LoadBalancer extends Configurable, Stoppable, ConfigurationObserver {
 
   //used to signal to the caller that the region(s) cannot be assigned
-  ServerName BOGUS_SERVER_NAME = ServerName.parseServerName("localhost,1,1");
+  ServerName BOGUS_SERVER_NAME = ServerName.parseServerName("bogus.example.com,1,1");
 
   /**
    * Set the current cluster status.  This allows a LoadBalancer to map host name to a server
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterCoprocessorHost.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterCoprocessorHost.java
index dbf777f..88ae50b 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterCoprocessorHost.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterCoprocessorHost.java
@@ -19,8 +19,6 @@
 
 package org.apache.hadoop.hbase.master;
 
-import com.google.common.net.HostAndPort;
-
 import java.io.IOException;
 import java.util.List;
 import java.util.Set;
@@ -43,6 +41,7 @@ import org.apache.hadoop.hbase.master.procedure.MasterProcedureEnv;
 import org.apache.hadoop.hbase.procedure2.ProcedureExecutor;
 import org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.SnapshotDescription;
 import org.apache.hadoop.hbase.protobuf.generated.QuotaProtos.Quotas;
+import org.apache.hadoop.hbase.util.Address;
 
 /**
  * Provides the coprocessor framework and environment for master oriented
@@ -1161,7 +1160,7 @@ public class MasterCoprocessorHost
     return bypass;
   }
 
-  public void preMoveServers(final Set<HostAndPort> servers, final String targetGroup)
+  public void preMoveServers(final Set<Address> servers, final String targetGroup)
       throws IOException {
     execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
@@ -1174,7 +1173,7 @@ public class MasterCoprocessorHost
     });
   }
 
-  public void postMoveServers(final Set<HostAndPort> servers, final String targetGroup)
+  public void postMoveServers(final Set<Address> servers, final String targetGroup)
       throws IOException {
     execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
index 256f2db..81a74e6 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
@@ -21,7 +21,6 @@ package org.apache.hadoop.hbase.regionserver;
 import java.io.IOException;
 import java.io.InterruptedIOException;
 import java.lang.Thread.UncaughtExceptionHandler;
-import java.lang.management.ManagementFactory;
 import java.lang.management.MemoryUsage;
 import java.lang.reflect.Constructor;
 import java.net.BindException;
@@ -190,6 +189,7 @@ import com.google.protobuf.RpcCallback;
 import com.google.protobuf.RpcController;
 import com.google.protobuf.Service;
 import com.google.protobuf.ServiceException;
+
 import sun.misc.Signal;
 import sun.misc.SignalHandler;
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
index c4bbbf7..7b45b84 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
@@ -18,8 +18,6 @@
  */
 package org.apache.hadoop.hbase.security.access;
 
-import com.google.common.net.HostAndPort;
-
 import java.io.IOException;
 import java.net.InetAddress;
 import java.security.PrivilegedExceptionAction;
@@ -116,6 +114,7 @@ import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;
 import org.apache.hadoop.hbase.util.Pair;
 import org.apache.hadoop.hbase.util.SimpleMutableByteRange;
 import org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher;
+import org.apache.hadoop.hbase.util.Address;
 
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.ImmutableSet;
@@ -2637,7 +2636,7 @@ public class AccessController extends BaseMasterAndRegionObserver
 
   @Override
   public void preMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                             Set<HostAndPort> servers, String targetGroup) throws IOException {
+                             Set<Address> servers, String targetGroup) throws IOException {
     requirePermission("moveServers", Action.ADMIN);
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/TestServerName.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/TestServerName.java
index 2c90f34..7ec5d64 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/TestServerName.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/TestServerName.java
@@ -89,25 +89,14 @@ public class TestServerName {
     assertFalse(sn.equals(sn3));
     assertEquals(sn.hashCode(), sn2.hashCode());
     assertNotSame(sn.hashCode(), sn3.hashCode());
-    assertEquals(sn.toString(),
-      ServerName.getServerName("www.example.org", 1234, 5678));
-    assertEquals(sn.toString(),
-      ServerName.getServerName("www.example.org:1234", 5678));
+    assertEquals(sn.toString(), ServerName.valueOf("www.example.org", 1234, 5678).toString());
+    assertEquals(sn.toString(), ServerName.valueOf("www.example.org:1234", 5678).toString());
     assertEquals(sn.toString(),
       "www.example.org" + ServerName.SERVERNAME_SEPARATOR + "1234" +
       ServerName.SERVERNAME_SEPARATOR + "5678");
   }
 
   @Test
-  public void getServerStartcodeFromServerName() {
-    ServerName sn = ServerName.valueOf("www.example.org", 1234, 5678);
-    assertEquals(5678,
-      ServerName.getServerStartcodeFromServerName(sn.toString()));
-    assertNotSame(5677,
-      ServerName.getServerStartcodeFromServerName(sn.toString()));
-  }
-
-  @Test
   public void testHostNameCaseSensitivity() {
     ServerName lower = ServerName.valueOf("www.example.org", 1234, 5678);
     ServerName upper = ServerName.valueOf("www.EXAMPLE.org", 1234, 5678);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterObserver.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterObserver.java
index 632a620..7455d66 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterObserver.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterObserver.java
@@ -70,8 +70,8 @@ import org.junit.Rule;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
 import org.junit.rules.TestName;
+import org.apache.hadoop.hbase.util.Address;
 
-import com.google.common.net.HostAndPort;
 
 /**
  * Tests invocation of the {@link org.apache.hadoop.hbase.coprocessor.MasterObserver}
@@ -1221,12 +1221,12 @@ public class TestMasterObserver {
 
     @Override
     public void preMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                               Set<HostAndPort> servers, String targetGroup) throws IOException {
+                               Set<Address> servers, String targetGroup) throws IOException {
     }
 
     @Override
     public void postMoveServers(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                                Set<HostAndPort> servers, String targetGroup) throws IOException {
+                                Set<Address> servers, String targetGroup) throws IOException {
     }
 
     @Override
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestRegionLocationFinder.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestRegionLocationFinder.java
index bdbdc9f..87cc2ca 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestRegionLocationFinder.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestRegionLocationFinder.java
@@ -27,15 +27,14 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.HDFSBlocksDistribution;
-import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.MiniHBaseCluster;
 import org.apache.hadoop.hbase.ServerName;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.client.Table;
-import org.apache.hadoop.hbase.regionserver.Region;
 import org.apache.hadoop.hbase.regionserver.HRegionServer;
-import org.apache.hadoop.hbase.util.Bytes;
+import org.apache.hadoop.hbase.regionserver.Region;
 import org.apache.hadoop.hbase.testclassification.SmallTests;
+import org.apache.hadoop.hbase.util.Bytes;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
diff --git a/hbase-shell/src/main/ruby/hbase/rsgroup_admin.rb b/hbase-shell/src/main/ruby/hbase/rsgroup_admin.rb
index 51a4efb..4b3dc70 100644
--- a/hbase-shell/src/main/ruby/hbase/rsgroup_admin.rb
+++ b/hbase-shell/src/main/ruby/hbase/rsgroup_admin.rb
@@ -1,6 +1,3 @@
-#
-# Copyright The Apache Software Foundation
-#
 # Licensed to the Apache Software Foundation (ASF) under one
 # or more contributor license agreements.  See the NOTICE file
 # distributed with this work for additional information
@@ -29,7 +26,7 @@ module Hbase
     include HBaseConstants
 
     def initialize(connection, formatter)
-      @admin = org.apache.hadoop.hbase.rsgroup.RSGroupAdmin.newClient(connection)
+      @admin = org.apache.hadoop.hbase.rsgroup.RSGroupAdminClient.new(connection)
       @formatter = formatter
     end
 
@@ -109,7 +106,7 @@ module Hbase
     def move_servers(dest, *args)
       servers = java.util.HashSet.new
       args[0].each do |s|
-        servers.add(com.google.common.net.HostAndPort.fromString(s))
+        servers.add(org.apache.hadoop.hbase.util.Address.fromString(s))
       end
       @admin.moveServers(servers, dest)
     end
@@ -128,7 +125,7 @@ module Hbase
     # get group of server
     def get_rsgroup_of_server(server)
       res = @admin.getRSGroupOfServer(
-          com.google.common.net.HostAndPort.fromString(server))
+        org.apache.hadoop.hbase.util.Address.fromString(server))
       if res.nil?
         raise(ArgumentError,'Server has no group: ' + server)
       end
diff --git a/hbase-shell/src/main/ruby/shell/commands/balance_rsgroup.rb b/hbase-shell/src/main/ruby/shell/commands/balance_rsgroup.rb
index bee139f..dbf8f3d 100644
--- a/hbase-shell/src/main/ruby/shell/commands/balance_rsgroup.rb
+++ b/hbase-shell/src/main/ruby/shell/commands/balance_rsgroup.rb
@@ -1,6 +1,3 @@
-#
-# Copyright The Apache Software Foundation
-#
 # Licensed to the Apache Software Foundation (ASF) under one
 # or more contributor license agreements.  See the NOTICE file
 # distributed with this work for additional information
diff --git a/hbase-shell/src/main/ruby/shell/commands/get_rsgroup.rb b/hbase-shell/src/main/ruby/shell/commands/get_rsgroup.rb
index 6772aa1..caa56bf 100644
--- a/hbase-shell/src/main/ruby/shell/commands/get_rsgroup.rb
+++ b/hbase-shell/src/main/ruby/shell/commands/get_rsgroup.rb
@@ -1,6 +1,3 @@
-#
-# Copyright The Apache Software Foundation
-#
 # Licensed to the Apache Software Foundation (ASF) under one
 # or more contributor license agreements.  See the NOTICE file
 # distributed with this work for additional information
@@ -33,8 +30,8 @@ EOF
 
       def command(group_name)
         now = Time.now
-        formatter.header(['GROUP INFORMATION'])
-        group_admin.get_rsgroup(group_name) do |s|
+        formatter.header(['REGIONSERVER GROUP INFORMATION'])
+        rsgroup_admin.get_rsgroup(group_name) do |s|
           formatter.row([s])
         end
         formatter.footer(now)
diff --git a/hbase-shell/src/main/ruby/shell/commands/get_server_rsgroup.rb b/hbase-shell/src/main/ruby/shell/commands/get_server_rsgroup.rb
index 322f6bb..1df655e 100644
--- a/hbase-shell/src/main/ruby/shell/commands/get_server_rsgroup.rb
+++ b/hbase-shell/src/main/ruby/shell/commands/get_server_rsgroup.rb
@@ -1,6 +1,3 @@
-#
-# Copyright The Apache Software Foundation
-#
 # Licensed to the Apache Software Foundation (ASF) under one
 # or more contributor license agreements.  See the NOTICE file
 # distributed with this work for additional information
@@ -31,7 +28,7 @@ EOF
 
       def command(server)
         now = Time.now
-        group_name = rsgroup_admin.getGroupOfServer(server).getName
+        group_name = rsgroup_admin.get_rsgroup_of_server(server).getName
         formatter.row([group_name])
         formatter.footer(now, 1)
       end
diff --git a/hbase-shell/src/main/ruby/shell/commands/get_table_rsgroup.rb b/hbase-shell/src/main/ruby/shell/commands/get_table_rsgroup.rb
index d15cffa..50debb3 100644
--- a/hbase-shell/src/main/ruby/shell/commands/get_table_rsgroup.rb
+++ b/hbase-shell/src/main/ruby/shell/commands/get_table_rsgroup.rb
@@ -1,6 +1,3 @@
-#
-# Copyright The Apache Software Foundation
-#
 # Licensed to the Apache Software Foundation (ASF) under one
 # or more contributor license agreements.  See the NOTICE file
 # distributed with this work for additional information
diff --git a/hbase-shell/src/main/ruby/shell/commands/list_rsgroups.rb b/hbase-shell/src/main/ruby/shell/commands/list_rsgroups.rb
index 6ea1d45..497cb7c 100644
--- a/hbase-shell/src/main/ruby/shell/commands/list_rsgroups.rb
+++ b/hbase-shell/src/main/ruby/shell/commands/list_rsgroups.rb
@@ -1,6 +1,3 @@
-#
-# Copyright The Apache Software Foundation
-#
 # Licensed to the Apache Software Foundation (ASF) under one
 # or more contributor license agreements.  See the NOTICE file
 # distributed with this work for additional information
@@ -35,7 +32,7 @@ EOF
 
       def command(regex = '.*')
         now = Time.now
-        formatter.header(['GROUPS'])
+        formatter.header(['REGIONSERVER GROUPS'])
 
         regex = /#{regex}/ unless regex.is_a?(Regexp)
         list = rsgroup_admin.list_rs_groups.grep(regex)
diff --git a/hbase-shell/src/main/ruby/shell/commands/move_rsgroup_servers.rb b/hbase-shell/src/main/ruby/shell/commands/move_rsgroup_servers.rb
index 6f48400..e391e2d 100644
--- a/hbase-shell/src/main/ruby/shell/commands/move_rsgroup_servers.rb
+++ b/hbase-shell/src/main/ruby/shell/commands/move_rsgroup_servers.rb
@@ -1,6 +1,3 @@
-#
-# Copyright The Apache Software Foundation
-#
 # Licensed to the Apache Software Foundation (ASF) under one
 # or more contributor license agreements.  See the NOTICE file
 # distributed with this work for additional information
diff --git a/hbase-shell/src/main/ruby/shell/commands/move_rsgroup_tables.rb b/hbase-shell/src/main/ruby/shell/commands/move_rsgroup_tables.rb
index 3c1555a..902cb43 100644
--- a/hbase-shell/src/main/ruby/shell/commands/move_rsgroup_tables.rb
+++ b/hbase-shell/src/main/ruby/shell/commands/move_rsgroup_tables.rb
@@ -1,6 +1,3 @@
-#
-# Copyright The Apache Software Foundation
-#
 # Licensed to the Apache Software Foundation (ASF) under one
 # or more contributor license agreements.  See the NOTICE file
 # distributed with this work for additional information
diff --git a/hbase-shell/src/main/ruby/shell/commands/remove_rsgroup.rb b/hbase-shell/src/main/ruby/shell/commands/remove_rsgroup.rb
index 9407732..c9af112 100644
--- a/hbase-shell/src/main/ruby/shell/commands/remove_rsgroup.rb
+++ b/hbase-shell/src/main/ruby/shell/commands/remove_rsgroup.rb
@@ -1,6 +1,3 @@
-#
-# Copyright The Apache Software Foundation
-#
 # Licensed to the Apache Software Foundation (ASF) under one
 # or more contributor license agreements.  See the NOTICE file
 # distributed with this work for additional information
diff --git a/hbase-shell/src/test/ruby/shell/rsgroup_shell_test.rb b/hbase-shell/src/test/ruby/shell/rsgroup_shell_test.rb
index d892775..31c7596 100644
--- a/hbase-shell/src/test/ruby/shell/rsgroup_shell_test.rb
+++ b/hbase-shell/src/test/ruby/shell/rsgroup_shell_test.rb
@@ -29,7 +29,7 @@ module Hbase
       @shell = Shell::Shell.new(@hbase, @formatter)
       connection = $TEST_CLUSTER.getConnection
       @rsgroup_admin =
-          org.apache.hadoop.hbase.rsgroup.RSGroupAdmin.newClient(connection)
+          org.apache.hadoop.hbase.rsgroup.RSGroupAdminClient.new(connection)
     end
 
     define_test 'Test Basic RSGroup Commands' do
-- 
1.7.9.5

