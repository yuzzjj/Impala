From 2119ff9f618d3e3499068977b9dec7defff93897 Mon Sep 17 00:00:00 2001
From: Enis Soztutar <enis@apache.org>
Date: Tue, 15 Mar 2016 11:22:18 -0700
Subject: [PATCH 324/362] HBASE-15377 Per-RS Get metric is time based,
 per-region metric is size-based (Heng Chen)

This patch set does not follow exactly the upstream commit to maintain the
compatibility with CM:
- get metrics contains the size of gets as before,
- getTime metrics contains the running time of gets.

Conflicts:
	hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
	hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java

(cherry picked from commit 5ff551754e7b64e3ddb4e609698a3395e0f73402)

Change-Id: I8cc485b9d0d4ecb173c3d6d62d28c0069c050185
Author: Enis Soztutar
Amending-Author: Balazs Meszaros
Reason: Improvement
Ref: CDH-51767
---
 .../regionserver/MetricsRegionServerSource.java    |    1 +
 .../hbase/regionserver/MetricsRegionSource.java    |    6 +++
 .../regionserver/MetricsRegionSourceImpl.java      |   14 +++++-
 .../apache/hadoop/hbase/regionserver/HRegion.java  |   11 +++--
 .../hadoop/hbase/regionserver/MetricsRegion.java   |    4 ++
 .../regionserver/TestRegionServerMetrics.java      |   46 ++++++++++++++++++++
 6 files changed, 78 insertions(+), 4 deletions(-)

diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSource.java
index 340b3f7..84ce095 100644
--- a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSource.java
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSource.java
@@ -275,6 +275,7 @@ public interface MetricsRegionServerSource extends BaseSource, JvmPauseMonitorSo
       "Number of MS updates have been blocked so that the memstore can be flushed.";
   String DELETE_KEY = "delete";
   String GET_KEY = "get";
+  String GET_TIME_KEY = "getTime";
   String INCREMENT_KEY = "increment";
   String MUTATE_KEY = "mutate";
   String APPEND_KEY = "append";
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSource.java
index 11fc068..f78c821 100644
--- a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSource.java
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSource.java
@@ -62,6 +62,12 @@ public interface MetricsRegionSource extends Comparable<MetricsRegionSource> {
   void updateGet(long getSize);
 
   /**
+   * Update time of gets
+   * @param mills time for this get operation.
+   */
+  void updateGetTime(long mills);
+
+  /**
    * Update the count and sizes of resultScanner.next()
    * @param scanSize Size in bytes of the resulting key values for a next()
    */
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSourceImpl.java
index c733515..535037c 100644
--- a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSourceImpl.java
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSourceImpl.java
@@ -49,6 +49,7 @@ public class MetricsRegionSourceImpl implements MetricsRegionSource {
   private final String regionPutKey;
   private final String regionDeleteKey;
   private final String regionGetKey;
+  private final String regionGetTimeKey;
   private final String regionIncrementKey;
   private final String regionAppendKey;
   private final String regionScanSizeKey;
@@ -59,6 +60,7 @@ public class MetricsRegionSourceImpl implements MetricsRegionSource {
   private final MutableFastCounter regionIncrement;
   private final MutableFastCounter regionAppend;
   private final MetricHistogram regionGet;
+  private final MetricHistogram regionGetTime;
   private final MetricHistogram regionScanSize;
   private final MetricHistogram regionScanTime;
   private final int hashCode;
@@ -94,7 +96,10 @@ public class MetricsRegionSourceImpl implements MetricsRegionSource {
     regionAppend = registry.getCounter(regionAppendKey, 0L);
 
     regionGetKey = regionNamePrefix + MetricsRegionServerSource.GET_KEY;
-    regionGet = registry.newTimeHistogram(regionGetKey);
+    regionGet = registry.newSizeHistogram(regionGetKey);
+
+    regionGetTimeKey = regionNamePrefix + MetricsRegionServerSource.GET_TIME_KEY;
+    regionGetTime = registry.newTimeHistogram(regionGetTimeKey);
 
     regionScanSizeKey = regionNamePrefix + MetricsRegionServerSource.SCAN_SIZE_KEY;
     regionScanSize = registry.newSizeHistogram(regionScanSizeKey);
@@ -130,9 +135,11 @@ public class MetricsRegionSourceImpl implements MetricsRegionSource {
       registry.removeMetric(regionIncrementKey);
       registry.removeMetric(regionAppendKey);
       registry.removeMetric(regionGetKey);
+      registry.removeMetric(regionGetTimeKey);
       registry.removeMetric(regionScanSizeKey);
       registry.removeMetric(regionScanTimeKey);
       registry.removeHistogramMetrics(regionGetKey);
+      registry.removeHistogramMetrics(regionGetTimeKey);
       registry.removeHistogramMetrics(regionScanSizeKey);
       registry.removeHistogramMetrics(regionScanTimeKey);
 
@@ -156,6 +163,11 @@ public class MetricsRegionSourceImpl implements MetricsRegionSource {
   }
 
   @Override
+  public void updateGetTime(long mills) {
+    regionGetTime.add(mills);
+  }
+
+  @Override
   public void updateScanSize(long scanSize) {
     regionScanSize.add(scanSize);
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
index 0c1a475..e3da32f 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
@@ -6798,7 +6798,7 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver, Regi
          return results;
        }
     }
-
+    long before =  EnvironmentEdgeManager.currentTime();
     Scan scan = new Scan(get);
 
     RegionScanner scanner = null;
@@ -6815,16 +6815,21 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver, Regi
       coprocessorHost.postGet(get, results);
     }
 
-    // do after lock
+    metricsUpdateForGet(results, before);
+
+    return results;
+  }
+
+  void metricsUpdateForGet(List<Cell> results, long before) {
     if (this.metricsRegion != null) {
       long totalSize = 0L;
       for (Cell cell : results) {
         totalSize += CellUtil.estimatedSerializedSizeOf(cell);
       }
       this.metricsRegion.updateGet(totalSize);
+      this.metricsRegion.updateGetTime(EnvironmentEdgeManager.currentTime() - before);
     }
 
-    return results;
   }
 
   @Override
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegion.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegion.java
index 56839ff..a0816e2 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegion.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegion.java
@@ -53,6 +53,10 @@ public class MetricsRegion {
     source.updateGet(getSize);
   }
 
+  public void updateGetTime(final long t) {
+    source.updateGetTime(t);
+  }
+
   public void updateScanSize(final long scanSize) {
     source.updateScanSize(scanSize);
   }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java
index 4979465..362fde2 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java
@@ -192,6 +192,52 @@ public class TestRegionServerMetrics {
   }
 
   @Test
+  public void testGet() throws Exception {
+    String tableNameString = "testGet";
+    TableName tName = TableName.valueOf(tableNameString);
+    byte[] cfName = Bytes.toBytes("d");
+    byte[] row = Bytes.toBytes("rk");
+    byte[] qualifier = Bytes.toBytes("qual");
+    byte[] initValue = Bytes.toBytes("Value");
+
+    TEST_UTIL.createTable(tName, cfName);
+
+    Connection connection = TEST_UTIL.getConnection();
+    connection.getTable(tName).close(); //wait for the table to come up.
+
+    // Do a first put to be sure that the connection is established, meta is there and so on.
+    Table table = connection.getTable(tName);
+    Put p = new Put(row);
+    p.addColumn(cfName, qualifier, initValue);
+    table.put(p);
+
+    Get g = new Get(row);
+    for (int i=0; i< 10; i++) {
+      table.get(g);
+    }
+
+    metricsRegionServer.getRegionServerWrapper().forceRecompute();
+
+    try (RegionLocator locator = connection.getRegionLocator(tName)) {
+      for ( HRegionLocation location: locator.getAllRegionLocations()) {
+        HRegionInfo i = location.getRegionInfo();
+        MetricsRegionAggregateSource agg = rs.getRegion(i.getRegionName())
+          .getMetrics()
+          .getSource()
+          .getAggregateSource();
+        String prefix = "namespace_"+NamespaceDescriptor.DEFAULT_NAMESPACE_NAME_STR+
+          "_table_"+tableNameString +
+          "_region_" + i.getEncodedName()+
+          "_metric";
+        metricsHelper.assertCounter(prefix + "_getNumOps", 10, agg);
+        metricsHelper.assertCounter(prefix + "_getTimeNumOps", 10, agg);
+      }
+      metricsHelper.assertCounterGt("GetTime_num_ops", 10, serverSource);
+    }
+    table.close();
+  }
+
+  @Test
   public void testMutationsWithoutWal() throws Exception {
     TableName tableName = TableName.valueOf("testMutationsWithoutWal");
     byte[] cf = Bytes.toBytes("d");
-- 
1.7.9.5

