From 39502d0141487661f6bfd194b1129fe5b62ab62d Mon Sep 17 00:00:00 2001
From: tedyu <yuzhihong@gmail.com>
Date: Tue, 21 Jun 2016 21:12:53 -0700
Subject: [PATCH 284/362] HBASE-16062 Improper error handling in WAL
 Reader/Writer creation (Vladimir Rodionov)

(cherry picked from commit 76db401058f312e0258273c73261e0496b265f1a)

Change-Id: I617ac97245aba03fdaa388143822d23de88f65d5
Reason: Bug
Author: Vladimir Rodionov
Ref: CDH-50431
---
 .../hadoop/hbase/wal/DefaultWALProvider.java       |   10 +++++++-
 .../org/apache/hadoop/hbase/wal/WALFactory.java    |   26 +++++++++++++-------
 2 files changed, 26 insertions(+), 10 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/DefaultWALProvider.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/DefaultWALProvider.java
index be55a9e..eeb22c9 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/DefaultWALProvider.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/DefaultWALProvider.java
@@ -389,12 +389,20 @@ public class DefaultWALProvider implements WALProvider {
     // Configuration already does caching for the Class lookup.
     Class<? extends Writer> logWriterClass = conf.getClass("hbase.regionserver.hlog.writer.impl",
         ProtobufLogWriter.class, Writer.class);
+    Writer writer = null;
     try {
-      Writer writer = logWriterClass.newInstance();
+      writer = logWriterClass.newInstance();
       writer.init(fs, path, conf, overwritable);
       return writer;
     } catch (Exception e) {
       LOG.debug("Error instantiating log writer.", e);
+      if (writer != null) {
+        try{
+          writer.close();
+        } catch(IOException ee){
+          LOG.error("cannot close log writer", ee);
+        }
+      }
       throw new IOException("cannot get log writer", e);
     }
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java
index c65bb56..3b7625f 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java
@@ -281,11 +281,12 @@ public class WALFactory {
       long openTimeout = timeoutMillis + startWaiting;
       int nbAttempt = 0;
       FSDataInputStream stream = null;
+      DefaultWALProvider.Reader reader = null;
       while (true) {
         try {
           if (lrClass != ProtobufLogReader.class) {
             // User is overriding the WAL reader, let them.
-            DefaultWALProvider.Reader reader = lrClass.newInstance();
+            reader = lrClass.newInstance();
             reader.init(fs, path, conf, null);
             return reader;
           } else {
@@ -297,19 +298,27 @@ public class WALFactory {
             byte[] magic = new byte[ProtobufLogReader.PB_WAL_MAGIC.length];
             boolean isPbWal = (stream.read(magic) == magic.length)
                 && Arrays.equals(magic, ProtobufLogReader.PB_WAL_MAGIC);
-            DefaultWALProvider.Reader reader =
+            reader =
                 isPbWal ? new ProtobufLogReader() : new SequenceFileLogReader();
             reader.init(fs, path, conf, stream);
             return reader;
           }
         } catch (IOException e) {
-          try {
-            if (stream != null) {
+          if (stream != null) {
+            try {
               stream.close();
+            } catch (IOException exception) {
+              LOG.warn("Could not close DefaultWALProvider.Reader" + exception.getMessage());
+              LOG.debug("exception details", exception);
+            }
+          }
+          if (reader != null) {
+            try {
+              reader.close();
+            } catch (IOException exception) {
+              LOG.warn("Could not close FSDataInputStream" + exception.getMessage());
+              LOG.debug("exception details", exception);
             }
-          } catch (IOException exception) {
-            LOG.warn("Could not close FSDataInputStream" + exception.getMessage());
-            LOG.debug("exception details", exception);
           }
           String msg = e.getMessage();
           if (msg != null && (msg.contains("Cannot obtain block length")
@@ -323,8 +332,7 @@ public class WALFactory {
             }
             if (nbAttempt > 2 && openTimeout < EnvironmentEdgeManager.currentTime()) {
               LOG.error("Can't open after " + nbAttempt + " attempts and "
-                + (EnvironmentEdgeManager.currentTime() - startWaiting)
-                + "ms " + " for " + path);
+                  + (EnvironmentEdgeManager.currentTime() - startWaiting) + "ms " + " for " + path);
             } else {
               try {
                 Thread.sleep(nbAttempt < 3 ? 500 : 1000);
-- 
1.7.9.5

