From fdd569608283a48a9ff64b76fe6589ebb1c51293 Mon Sep 17 00:00:00 2001
From: Phil Yang <yangzhe1991@apache.org>
Date: Wed, 31 May 2017 14:17:20 +0800
Subject: [PATCH 386/410] HBASE-18122 Scanner id should include ServerName of
 region server

(cherry picked from commit afbbfb4474bd54cde085f71bdb0f13dfae65a2a6)

Change-Id: I6b94799403db0b535e41d40662dcd807be4418b7
Author: Phil Yang
Reason: Bug
Ref: CDH-57974
---
 .../hadoop/hbase/regionserver/RSRpcServices.java   |    5 +-
 .../hbase/regionserver/ScannerIdGenerator.java     |   51 ++++++++++++++++++++
 2 files changed, 54 insertions(+), 2 deletions(-)
 create mode 100644 hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ScannerIdGenerator.java

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
index 56e9421..9f40fd8 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
@@ -229,7 +229,7 @@ public class RSRpcServices implements HBaseRPCErrorHandler,
   // The reference to the priority extraction function
   private final PriorityFunction priority;
 
-  private final AtomicLong scannerIdGen = new AtomicLong(0L);
+  private ScannerIdGenerator scannerIdGenerator;
   private final ConcurrentHashMap<String, RegionScannerHolder> scanners =
     new ConcurrentHashMap<String, RegionScannerHolder>();
 
@@ -1005,7 +1005,7 @@ public class RSRpcServices implements HBaseRPCErrorHandler,
   }
 
   long addScanner(RegionScanner s, Region r) throws LeaseStillHeldException {
-    long scannerId = this.scannerIdGen.incrementAndGet();
+    long scannerId = this.scannerIdGenerator.generateNewScannerId();
     String scannerName = String.valueOf(scannerId);
 
     RegionScannerHolder existing =
@@ -1071,6 +1071,7 @@ public class RSRpcServices implements HBaseRPCErrorHandler,
   }
 
   void start() {
+    this.scannerIdGenerator = new ScannerIdGenerator(this.regionServer.serverName);
     rpcServer.start();
   }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ScannerIdGenerator.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ScannerIdGenerator.java
new file mode 100644
index 0000000..c639556
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ScannerIdGenerator.java
@@ -0,0 +1,51 @@
+/**
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import com.google.common.hash.Hashing;
+
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicLong;
+
+import org.apache.hadoop.hbase.ServerName;
+import org.apache.hadoop.hbase.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.util.Bytes;
+
+/**
+ * Generate a new style scanner id to prevent collision with previous started server or other RSs.
+ * We have 64 bits to use.
+ * The first 32 bits are MurmurHash32 of ServerName string "host,port,ts".
+ * The ServerName contains both host, port, and start timestamp so it can prevent collision.
+ * The lowest 32bit is generated by atomic int.
+ */
+@InterfaceAudience.Private
+public class ScannerIdGenerator {
+
+  private final long serverNameHash;
+  private final AtomicInteger scannerIdGen = new AtomicInteger(0);
+
+  public ScannerIdGenerator(ServerName serverName) {
+    this.serverNameHash = (long)Hashing.murmur3_32().hashString(serverName.toString()).asInt() << 32;
+  }
+
+  public long generateNewScannerId() {
+    return (scannerIdGen.incrementAndGet() & 0x00000000FFFFFFFFL) | serverNameHash;
+  }
+
+}
-- 
1.7.9.5

