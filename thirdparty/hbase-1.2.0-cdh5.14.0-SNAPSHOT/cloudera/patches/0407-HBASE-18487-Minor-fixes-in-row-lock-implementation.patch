From 16462b2588d5c381d3369b57867d2a86bb396292 Mon Sep 17 00:00:00 2001
From: James Taylor <jamestaylor@apache.org>
Date: Mon, 31 Jul 2017 11:42:48 -0700
Subject: [PATCH 407/410] HBASE-18487 Minor fixes in row lock implementation

Signed-off-by: Andrew Purtell <apurtell@apache.org>

(cherry picked from commit 6cadd1def796656efbcb3ca10befe5d323b53f1a)

Change-Id: Ic842044a8ce78f517728aac3a451ae5db24be29b
Author: James Taylor
Reason: Bug
Ref: CDH-57983
---
 .../apache/hadoop/hbase/regionserver/HRegion.java  |   10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
index 65d57cc..d886ee7 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
@@ -5194,6 +5194,7 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver, Regi
       traceScope.getSpan().addTimelineAnnotation("Getting a " + (readLock?"readLock":"writeLock"));
     }
 
+    boolean success = false;
     try {
       // Keep trying until we have a lock or error out.
       // TODO: do we need to add a time component here?
@@ -5223,12 +5224,11 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver, Regi
           traceScope.getSpan().addTimelineAnnotation("Failed to get row lock");
         }
         result = null;
-        // Clean up the counts just in case this was the thing keeping the context alive.
-        rowLockContext.cleanUp();
         throw new IOException("Timed out waiting for lock for row: " + rowKey + " in region "
             + getRegionInfo().getEncodedName());
       }
       rowLockContext.setThreadName(Thread.currentThread().getName());
+      success = true;
       return result;
     } catch (InterruptedException ie) {
       LOG.warn("Thread interrupted waiting for lock on row: " + rowKey);
@@ -5240,6 +5240,10 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver, Regi
       Thread.currentThread().interrupt();
       throw iie;
     } finally {
+      // Clean up the counts just in case this was the thing keeping the context alive.
+      if (!success && rowLockContext != null) {
+        rowLockContext.cleanUp();
+      }
       if (traceScope != null) {
         traceScope.close();
       }
@@ -5297,7 +5301,7 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver, Regi
       long c = count.decrementAndGet();
       if (c <= 0) {
         synchronized (lock) {
-          if (count.get() <= 0 ){
+          if (count.get() <= 0 && usable.get()){ // Don't attempt to remove row if already removed
             usable.set(false);
             RowLockContext removed = lockedRows.remove(row);
             assert removed == this: "we should never remove a different context";
-- 
1.7.9.5

