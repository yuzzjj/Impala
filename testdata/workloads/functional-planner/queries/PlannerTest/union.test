# binding predicates of b.month equiv class gets propagated into union
select * from
  (select year, month from functional.alltypes
   union all
   select year, month from functional.alltypes) a
  inner join
  functional.alltypessmall b
  on (a.month = b.month)
where b.month = 1
---- PLAN
PLAN-ROOT SINK
|
04:HASH JOIN [INNER JOIN]
|  hash predicates: month = b.month
|  runtime filters: RF000 <- b.month
|
|--03:SCAN HDFS [functional.alltypessmall b]
|     partitions=1/4 files=1 size=1.57KB
|
00:UNION
|  pass-through-operands: all
|
|--02:SCAN HDFS [functional.alltypes]
|     partitions=2/24 files=2 size=40.32KB
|     runtime filters: RF000 -> functional.alltypes.month
|
01:SCAN HDFS [functional.alltypes]
   partitions=2/24 files=2 size=40.32KB
   runtime filters: RF000 -> functional.alltypes.month
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
06:EXCHANGE [UNPARTITIONED]
|
04:HASH JOIN [INNER JOIN, BROADCAST]
|  hash predicates: month = b.month
|  runtime filters: RF000 <- b.month
|
|--05:EXCHANGE [BROADCAST]
|  |
|  03:SCAN HDFS [functional.alltypessmall b]
|     partitions=1/4 files=1 size=1.57KB
|
00:UNION
|  pass-through-operands: all
|
|--02:SCAN HDFS [functional.alltypes]
|     partitions=2/24 files=2 size=40.32KB
|     runtime filters: RF000 -> functional.alltypes.month
|
01:SCAN HDFS [functional.alltypes]
   partitions=2/24 files=2 size=40.32KB
   runtime filters: RF000 -> functional.alltypes.month
====
// Only UNION ALL, no nested unions
select * from functional.alltypestiny where year=2009 and month=1
union all
select * from functional.alltypestiny where year=2009 and month=1
union all
select * from functional.alltypestiny where year=2009 and month=2
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
04:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Only UNION ALL with limit inside operands. One of the operands also has an order by.
select * from functional.alltypestiny where year=2009 and month=1 limit 1
union all
select * from functional.alltypestiny where year=2009 and month=1 order by int_col limit 1
union all
select * from functional.alltypestiny where year=2009 and month=2 limit 1
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--04:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|     limit: 1
|
|--03:TOP-N [LIMIT=1]
|  |  order by: int_col ASC
|  |
|  02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
   limit: 1
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 4:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--07:EXCHANGE [UNPARTITIONED]
|  |  limit: 1
|  |
|  04:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|     limit: 1
|
|--06:MERGING-EXCHANGE [UNPARTITIONED]
|  |  order by: int_col ASC
|  |  limit: 1
|  |
|  03:TOP-N [LIMIT=1]
|  |  order by: int_col ASC
|  |
|  02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
05:EXCHANGE [UNPARTITIONED]
|  limit: 1
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
   limit: 1
====
// Only UNION DISTINCT, no nested unions
select * from functional.alltypestiny where year=2009 and month=1
union distinct
select * from functional.alltypestiny where year=2009 and month=1
union distinct
select * from functional.alltypestiny where year=2009 and month=2
---- PLAN
PLAN-ROOT SINK
|
04:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
07:EXCHANGE [UNPARTITIONED]
|
06:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
05:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|
04:AGGREGATE [STREAMING]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Only UNION ALL, mixed selects with and without from clauses, no nested unions
select * from functional.alltypestiny where year=2009 and month=1
union all
select 0,true,0,0,0,0,0,0,'01/01/09','0',cast('2009-01-01 00:00:00' as timestamp),2009,1
union all
select * from functional.alltypestiny where year=2009 and month=1
union all
select 1,false,1,1,1,10,1.1,10.1,'01/01/09','1',cast('2009-01-01 00:01:00' as timestamp),2009,1
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  constant-operands=2
|  pass-through-operands: all
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
03:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  constant-operands=2
|  pass-through-operands: all
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Only UNION DISTINCT, mixed selects with and without from clauses, no nested unions
select * from functional.alltypestiny where year=2009 and month=1
union distinct
select 0,true,0,0,0,0,0,0,'01/01/09','0',cast('2009-01-01 00:00:00' as timestamp),2009,1
union distinct
select * from functional.alltypestiny where year=2009 and month=1
union distinct
select 1,false,1,1,1,10,1.1,10.1,'01/01/09','1',cast('2009-01-01 00:01:00' as timestamp),2009,1
---- PLAN
PLAN-ROOT SINK
|
03:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  constant-operands=2
|  pass-through-operands: all
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
06:EXCHANGE [UNPARTITIONED]
|
05:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
04:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|
03:AGGREGATE [STREAMING]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  constant-operands=2
|  pass-through-operands: all
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Mixed UNION ALL/DISTINCT but effectively only UNION DISTINCT, no nested unions,
// with order by and limit
select * from functional.alltypestiny where year=2009 and month=1
union all
select * from functional.alltypestiny where year=2009 and month=1
union all
select * from functional.alltypestiny where year=2009 and month=2
union distinct
(select * from functional.alltypestiny where year=2009 and month=2)
order by 3 limit 3
---- PLAN
PLAN-ROOT SINK
|
06:TOP-N [LIMIT=3]
|  order by: tinyint_col ASC
|
05:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--04:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 4:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
09:MERGING-EXCHANGE [UNPARTITIONED]
|  order by: tinyint_col ASC
|  limit: 3
|
06:TOP-N [LIMIT=3]
|  order by: tinyint_col ASC
|
08:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
07:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|
05:AGGREGATE [STREAMING]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--04:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Mixed UNION ALL/DISTINCT, no nested unions, with order by and limit
select * from functional.alltypestiny where year=2009 and month=1
union distinct
select * from functional.alltypestiny where year=2009 and month=1
union all
select * from functional.alltypestiny where year=2009 and month=2
union all
(select * from functional.alltypestiny where year=2009 and month=2)
order by 3,4 limit 3
---- PLAN
PLAN-ROOT SINK
|
07:TOP-N [LIMIT=3]
|  order by: tinyint_col ASC, smallint_col ASC
|
04:UNION
|  pass-through-operands: all
|
|--03:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  00:UNION
|  |  pass-through-operands: all
|  |
|  |--02:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  01:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--06:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
05:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 5:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 6:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
10:MERGING-EXCHANGE [UNPARTITIONED]
|  order by: tinyint_col ASC, smallint_col ASC
|  limit: 3
|
07:TOP-N [LIMIT=3]
|  order by: tinyint_col ASC, smallint_col ASC
|
04:UNION
|  pass-through-operands: all
|
|--09:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  08:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|  |
|  03:AGGREGATE [STREAMING]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  00:UNION
|  |  pass-through-operands: all
|  |
|  |--02:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  01:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--06:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
05:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Mixed UNION ALL/DISTINCT, no nested unions, with order by and limit
select * from functional.alltypestiny where year=2009 and month=1
union all
select * from functional.alltypestiny where year=2009 and month=1
union distinct
select * from functional.alltypestiny where year=2009 and month=2
union all
(select * from functional.alltypestiny where year=2009 and month=2)
order by 3,4 limit 4
---- PLAN
PLAN-ROOT SINK
|
07:TOP-N [LIMIT=4]
|  order by: tinyint_col ASC, smallint_col ASC
|
05:UNION
|  pass-through-operands: all
|
|--04:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  00:UNION
|  |  pass-through-operands: all
|  |
|  |--03:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  |--02:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  01:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
06:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 6:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
10:MERGING-EXCHANGE [UNPARTITIONED]
|  order by: tinyint_col ASC, smallint_col ASC
|  limit: 4
|
07:TOP-N [LIMIT=4]
|  order by: tinyint_col ASC, smallint_col ASC
|
05:UNION
|  pass-through-operands: all
|
|--09:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  08:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|  |
|  04:AGGREGATE [STREAMING]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  00:UNION
|  |  pass-through-operands: all
|  |
|  |--03:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  |--02:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  01:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
06:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: Only UNION ALL, first operand is nested
(select * from functional.alltypestiny where year=2009 and month=1
 union all
 select * from functional.alltypestiny where year=2009 and month=2)
union all
select * from functional.alltypestiny where year=2009 and month=1
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
04:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: Only UNION ALL, second operand is nested
select * from functional.alltypestiny where year=2009 and month=1
union all
  (select * from functional.alltypestiny where year=2009 and month=1
   union all
   select * from functional.alltypestiny where year=2009 and month=2)
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
04:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: Only UNION DISTINCT, first operand is nested
(select * from functional.alltypestiny where year=2009 and month=1
 union distinct
 select * from functional.alltypestiny where year=2009 and month=2)
union distinct
select * from functional.alltypestiny where year=2009 and month=1
---- PLAN
PLAN-ROOT SINK
|
04:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
07:EXCHANGE [UNPARTITIONED]
|
06:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
05:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|
04:AGGREGATE [STREAMING]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: Only UNION DISTINCT, second operand is nested
select * from functional.alltypestiny where year=2009 and month=1
union distinct
  (select * from functional.alltypestiny where year=2009 and month=1
   union distinct
   select * from functional.alltypestiny where year=2009 and month=2)
---- PLAN
PLAN-ROOT SINK
|
04:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
07:EXCHANGE [UNPARTITIONED]
|
06:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
05:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|
04:AGGREGATE [STREAMING]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: UNION ALL doesn't absorb nested union with DISTINCT,
// first operand is nested
(select * from functional.alltypestiny where year=2009 and month=1
 union distinct
 select * from functional.alltypestiny where year=2009 and month=2)
union all
select * from functional.alltypestiny where year=2009 and month=1
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--05:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
04:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
01:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
02:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 5:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
08:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  pass-through-operands: all
|
|--05:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
07:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
06:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|
04:AGGREGATE [STREAMING]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
01:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
02:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: UNION ALL doesn't absorb nested union with DISTINCT,
// second operand is nested
select * from functional.alltypestiny where year=2009 and month=1
union all
  (select * from functional.alltypestiny where year=2009 and month=1
   union distinct
   select * from functional.alltypestiny where year=2009 and month=2)
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--05:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  02:UNION
|  |  pass-through-operands: all
|  |
|  |--04:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 4:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
08:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  pass-through-operands: all
|
|--07:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  06:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|  |
|  05:AGGREGATE [STREAMING]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  02:UNION
|  |  pass-through-operands: all
|  |
|  |--04:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: UNION ALL absorbs the children but not directly the operands
// of a nested union with mixed ALL/DISTINCT, first operand is nested
(select * from functional.alltypestiny where year=2009 and month=1
 union distinct
 select * from functional.alltypestiny where year=2009 and month=2
 union all
 select * from functional.alltypestiny where year=2009 and month=2)
union all
select * from functional.alltypestiny where year=2009 and month=1
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--06:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--05:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  02:UNION
|  |  pass-through-operands: all
|  |
|  |--04:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 4:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 6:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
09:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  pass-through-operands: all
|
|--06:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--08:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  07:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|  |
|  05:AGGREGATE [STREAMING]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  02:UNION
|  |  pass-through-operands: all
|  |
|  |--04:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: UNION ALL absorbs the children but not directly the operands
// of a nested union with mixed ALL/DISTINCT, second operand is nested
select * from functional.alltypestiny where year=2009 and month=1
union all
  (select * from functional.alltypestiny where year=2009 and month=1
   union distinct
   select * from functional.alltypestiny where year=2009 and month=2
   union all
   select * from functional.alltypestiny where year=2009 and month=2)
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--06:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  03:UNION
|  |  pass-through-operands: all
|  |
|  |--05:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  04:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 4:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 5:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
09:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  pass-through-operands: all
|
|--08:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  07:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|  |
|  06:AGGREGATE [STREAMING]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  03:UNION
|  |  pass-through-operands: all
|  |
|  |--05:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  04:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: UNION ALL doesn't absorb the children of a nested union
// with mixed ALL/DISTINCT and limit, second operand is nested
select * from functional.alltypestiny where year=2009 and month=1
union all
  (select * from functional.alltypestiny where year=2009 and month=1
   union distinct
   select * from functional.alltypestiny where year=2009 and month=2
   union all
   (select * from functional.alltypestiny where year=2009 and month=2)
   limit 10)
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--06:UNION
|  |  pass-through-operands: all
|  |  limit: 10
|  |
|  |--05:AGGREGATE [FINALIZE]
|  |  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |  |
|  |  02:UNION
|  |  |  pass-through-operands: all
|  |  |
|  |  |--04:SCAN HDFS [functional.alltypestiny]
|  |  |     partitions=1/4 files=1 size=115B
|  |  |
|  |  03:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  07:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 4:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 7:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
12:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  pass-through-operands: all
|
|--11:EXCHANGE [RANDOM]
|  |
|  10:EXCHANGE [UNPARTITIONED]
|  |  limit: 10
|  |
|  06:UNION
|  |  pass-through-operands: all
|  |  limit: 10
|  |
|  |--09:AGGREGATE [FINALIZE]
|  |  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |  |
|  |  08:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|  |  |
|  |  05:AGGREGATE [STREAMING]
|  |  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |  |
|  |  02:UNION
|  |  |  pass-through-operands: all
|  |  |
|  |  |--04:SCAN HDFS [functional.alltypestiny]
|  |  |     partitions=1/4 files=1 size=115B
|  |  |
|  |  03:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  07:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: UNION ALL doesn't absorb nested union with order by and limit,
// first operand is nested
(select * from functional.alltypestiny where year=2009 and month=1
 union all
 (select * from functional.alltypestiny where year=2009 and month=2)
 order by 3 limit 3)
union all
select * from functional.alltypestiny where year=2009 and month=1
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--05:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
04:TOP-N [LIMIT=3]
|  order by: tinyint_col ASC
|
01:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
02:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 5:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
08:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  pass-through-operands: all
|
|--05:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
07:EXCHANGE [RANDOM]
|
06:MERGING-EXCHANGE [UNPARTITIONED]
|  order by: tinyint_col ASC
|  limit: 3
|
04:TOP-N [LIMIT=3]
|  order by: tinyint_col ASC
|
01:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
02:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: UNION ALL doesn't absorb nested union with order by and limit,
// second operand is nested
select * from functional.alltypestiny where year=2009 and month=1
union all
  (select * from functional.alltypestiny where year=2009 and month=1
   union all
   (select * from functional.alltypestiny where year=2009 and month=2)
   order by 3 limit 3)
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--05:TOP-N [LIMIT=3]
|  |  order by: tinyint_col ASC
|  |
|  02:UNION
|  |  pass-through-operands: all
|  |
|  |--04:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 4:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
08:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  pass-through-operands: all
|
|--07:EXCHANGE [RANDOM]
|  |
|  06:MERGING-EXCHANGE [UNPARTITIONED]
|  |  order by: tinyint_col ASC
|  |  limit: 3
|  |
|  05:TOP-N [LIMIT=3]
|  |  order by: tinyint_col ASC
|  |
|  02:UNION
|  |  pass-through-operands: all
|  |
|  |--04:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: UNION DISTINCT absorbs nested union with ALL
// first operand is nested
(select * from functional.alltypestiny where year=2009 and month=1
 union all
 select * from functional.alltypestiny where year=2009 and month=2)
union distinct
select * from functional.alltypestiny where year=2009 and month=1
---- PLAN
PLAN-ROOT SINK
|
04:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
07:EXCHANGE [UNPARTITIONED]
|
06:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
05:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|
04:AGGREGATE [STREAMING]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: UNION DISTINCT absorbs nested union with ALL,
// second operand is nested
select * from functional.alltypestiny where year=2009 and month=1
union distinct
  (select * from functional.alltypestiny where year=2009 and month=1
   union all
   select * from functional.alltypestiny where year=2009 and month=2)
---- PLAN
PLAN-ROOT SINK
|
04:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
07:EXCHANGE [UNPARTITIONED]
|
06:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
05:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|
04:AGGREGATE [STREAMING]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: UNION DISTINCT absorbs nested union with mixed ALL/DISTINCT,
// first operand is nested
(select * from functional.alltypestiny where year=2009 and month=1
 union distinct
 select * from functional.alltypestiny where year=2009 and month=2
 union all
 select * from functional.alltypestiny where year=2009 and month=2)
union distinct
select * from functional.alltypestiny where year=2009 and month=1
---- PLAN
PLAN-ROOT SINK
|
05:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--04:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 4:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
08:EXCHANGE [UNPARTITIONED]
|
07:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
06:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|
05:AGGREGATE [STREAMING]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--04:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: UNION DISTINCT absorbs nested union with mixed ALL/DISTINCT,
// second operand is nested
select * from functional.alltypestiny where year=2009 and month=1
union distinct
  (select * from functional.alltypestiny where year=2009 and month=1
   union distinct
   select * from functional.alltypestiny where year=2009 and month=2
   union all
   select * from functional.alltypestiny where year=2009 and month=2)
---- PLAN
PLAN-ROOT SINK
|
05:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--04:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 4:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
08:EXCHANGE [UNPARTITIONED]
|
07:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
06:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|
05:AGGREGATE [STREAMING]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--04:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: UNION DISTINCT doesn't absorb nested union with order by and limit,
// first operand is nested
(select * from functional.alltypestiny where year=2009 and month=1
 union all
 (select * from functional.alltypestiny where year=2009 and month=2)
 order by 3 limit 3)
union distinct
select * from functional.alltypestiny where year=2009 and month=1
---- PLAN
PLAN-ROOT SINK
|
06:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--05:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
04:TOP-N [LIMIT=3]
|  order by: tinyint_col ASC
|
01:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
02:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 5:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
11:EXCHANGE [UNPARTITIONED]
|
10:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
09:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|
06:AGGREGATE [STREAMING]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--05:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
08:EXCHANGE [RANDOM]
|
07:MERGING-EXCHANGE [UNPARTITIONED]
|  order by: tinyint_col ASC
|  limit: 3
|
04:TOP-N [LIMIT=3]
|  order by: tinyint_col ASC
|
01:UNION
|  pass-through-operands: all
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
02:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Union unnesting: UNION DISTINCT doesn't absorb nested union with order by and limit
// second operand is nested
select * from functional.alltypestiny where year=2009 and month=1
union distinct
  (select * from functional.alltypestiny where year=2009 and month=1
   union all
   (select * from functional.alltypestiny where year=2009 and month=2)
   order by 3 limit 3)
---- PLAN
PLAN-ROOT SINK
|
06:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--05:TOP-N [LIMIT=3]
|  |  order by: tinyint_col ASC
|  |
|  02:UNION
|  |  pass-through-operands: all
|  |
|  |--04:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 4:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
11:EXCHANGE [UNPARTITIONED]
|
10:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
09:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|
06:AGGREGATE [STREAMING]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--08:EXCHANGE [RANDOM]
|  |
|  07:MERGING-EXCHANGE [UNPARTITIONED]
|  |  order by: tinyint_col ASC
|  |  limit: 3
|  |
|  05:TOP-N [LIMIT=3]
|  |  order by: tinyint_col ASC
|  |
|  02:UNION
|  |  pass-through-operands: all
|  |
|  |--04:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Complex union unnesting: Multiple levels of UNION ALL, fully unnestable
select * from functional.alltypestiny where year=2009 and month=1
union all
  (select * from functional.alltypestiny where year=2009 and month=1
   union all
     (select * from functional.alltypestiny where year=2009 and month=2
      union all
        (select * from functional.alltypestiny where year=2009 and month=2
         union all
         select * from functional.alltypestiny where year=2009 and month=3)))
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--05:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--04:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 4:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 5:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=3/090301.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
06:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  pass-through-operands: all
|
|--05:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--04:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Complex union unnesting: Multiple levels of UNION DISTINCT, fully unnestable
select * from functional.alltypestiny where year=2009 and month=1
union distinct
  (select * from functional.alltypestiny where year=2009 and month=1
   union distinct
     (select * from functional.alltypestiny where year=2009 and month=2
      union distinct
        (select * from functional.alltypestiny where year=2009 and month=2
         union distinct
         select * from functional.alltypestiny where year=2009 and month=3)))
---- PLAN
PLAN-ROOT SINK
|
06:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--05:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--04:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 4:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 5:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=3/090301.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
09:EXCHANGE [UNPARTITIONED]
|
08:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
07:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|
06:AGGREGATE [STREAMING]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--05:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--04:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Complex union unnesting: Partially unnestable up to 2nd level
select * from functional.alltypestiny where year=2009 and month=1
union all
  (select * from functional.alltypestiny where year=2009 and month=1
   union distinct
     (select * from functional.alltypestiny where year=2009 and month=2
      union all
        (select * from functional.alltypestiny where year=2009 and month=2
         union distinct
         (select * from functional.alltypestiny where year=2009 and month=3)
         order by 3 limit 3)))
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--10:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  02:UNION
|  |  pass-through-operands: all
|  |
|  |--09:TOP-N [LIMIT=3]
|  |  |  order by: tinyint_col ASC
|  |  |
|  |  08:AGGREGATE [FINALIZE]
|  |  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |  |
|  |  05:UNION
|  |  |  pass-through-operands: all
|  |  |
|  |  |--07:SCAN HDFS [functional.alltypestiny]
|  |  |     partitions=1/4 files=1 size=115B
|  |  |
|  |  06:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  |--04:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 4:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 6:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 7:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=3/090301.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
17:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  pass-through-operands: all
|
|--16:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  15:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|  |
|  10:AGGREGATE [STREAMING]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  02:UNION
|  |  pass-through-operands: all
|  |
|  |--14:EXCHANGE [RANDOM]
|  |  |
|  |  13:MERGING-EXCHANGE [UNPARTITIONED]
|  |  |  order by: tinyint_col ASC
|  |  |  limit: 3
|  |  |
|  |  09:TOP-N [LIMIT=3]
|  |  |  order by: tinyint_col ASC
|  |  |
|  |  12:AGGREGATE [FINALIZE]
|  |  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |  |
|  |  11:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|  |  |
|  |  08:AGGREGATE [STREAMING]
|  |  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |  |
|  |  05:UNION
|  |  |  pass-through-operands: all
|  |  |
|  |  |--07:SCAN HDFS [functional.alltypestiny]
|  |  |     partitions=1/4 files=1 size=115B
|  |  |
|  |  06:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  |--04:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Complex union unnesting: Partially unnestable up to 1st level
select * from functional.alltypestiny where year=2009 and month=1
union distinct
  (select * from functional.alltypestiny where year=2009 and month=1
   union distinct
     (select * from functional.alltypestiny where year=2009 and month=2
      union all
        (select * from functional.alltypestiny where year=2009 and month=2
         union distinct
         (select * from functional.alltypestiny where year=2009 and month=3)
         order by 3 limit 3)))
---- PLAN
PLAN-ROOT SINK
|
09:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--08:TOP-N [LIMIT=3]
|  |  order by: tinyint_col ASC
|  |
|  07:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  04:UNION
|  |  pass-through-operands: all
|  |
|  |--06:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  05:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 5:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 6:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=3/090301.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
16:EXCHANGE [UNPARTITIONED]
|
15:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
14:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|
09:AGGREGATE [STREAMING]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--13:EXCHANGE [RANDOM]
|  |
|  12:MERGING-EXCHANGE [UNPARTITIONED]
|  |  order by: tinyint_col ASC
|  |  limit: 3
|  |
|  08:TOP-N [LIMIT=3]
|  |  order by: tinyint_col ASC
|  |
|  11:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  10:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|  |
|  07:AGGREGATE [STREAMING]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  04:UNION
|  |  pass-through-operands: all
|  |
|  |--06:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  05:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// Complex union unnesting: Multiple nested unions to test all rules in a single query
select * from functional.alltypestiny where year=2009 and month=1
union distinct
  (select * from functional.alltypestiny where year=2009 and month=1
   union all
   select * from functional.alltypestiny where year=2009 and month=2)
union distinct
  (select * from functional.alltypestiny where year=2009 and month=2
   union all
   (select * from functional.alltypestiny where year=2009 and month=3)
   order by 3 limit 3)
union all
  (select * from functional.alltypestiny where year=2009 and month=3
   union all
   select * from functional.alltypestiny where year=2009 and month=4)
union all
  (select * from functional.alltypestiny where year=2009 and month=4
   union all
   (select * from functional.alltypestiny where year=2009 and month=5)
   order by 3 limit 3)
---- PLAN
PLAN-ROOT SINK
|
09:UNION
|  pass-through-operands: all
|
|--08:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  00:UNION
|  |  pass-through-operands: all
|  |
|  |--07:TOP-N [LIMIT=3]
|  |  |  order by: tinyint_col ASC
|  |  |
|  |  04:UNION
|  |  |  pass-through-operands: all
|  |  |
|  |  |--06:SCAN HDFS [functional.alltypestiny]
|  |  |     partitions=1/4 files=1 size=115B
|  |  |
|  |  05:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  |--03:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  |--02:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  01:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--15:TOP-N [LIMIT=3]
|  |  order by: tinyint_col ASC
|  |
|  12:UNION
|  |  pass-through-operands: all
|  |
|  |--14:SCAN HDFS [functional.alltypestiny]
|  |     partitions=0/4 files=0 size=0B
|  |
|  13:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--11:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
10:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 5:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
NODE 6:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=3/090301.txt 0:115
NODE 10:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=3/090301.txt 0:115
NODE 11:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=4/090401.txt 0:115
NODE 13:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=4/090401.txt 0:115
NODE 14:
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
22:EXCHANGE [UNPARTITIONED]
|
09:UNION
|  pass-through-operands: all
|
|--20:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  19:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|  |
|  08:AGGREGATE [STREAMING]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  00:UNION
|  |  pass-through-operands: all
|  |
|  |--18:EXCHANGE [RANDOM]
|  |  |
|  |  17:MERGING-EXCHANGE [UNPARTITIONED]
|  |  |  order by: tinyint_col ASC
|  |  |  limit: 3
|  |  |
|  |  07:TOP-N [LIMIT=3]
|  |  |  order by: tinyint_col ASC
|  |  |
|  |  04:UNION
|  |  |  pass-through-operands: all
|  |  |
|  |  |--06:SCAN HDFS [functional.alltypestiny]
|  |  |     partitions=1/4 files=1 size=115B
|  |  |
|  |  05:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  |--03:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  |--02:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  01:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--21:EXCHANGE [RANDOM]
|  |
|  16:MERGING-EXCHANGE [UNPARTITIONED]
|  |  order by: tinyint_col ASC
|  |  limit: 3
|  |
|  15:TOP-N [LIMIT=3]
|  |  order by: tinyint_col ASC
|  |
|  12:UNION
|  |  pass-through-operands: all
|  |
|  |--14:SCAN HDFS [functional.alltypestiny]
|  |     partitions=0/4 files=0 size=0B
|  |
|  13:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
|--11:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
10:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// UNION ALL in subquery
select x.* from
  (select * from functional.alltypestiny where year=2009 and month=1
   union all
   select * from functional.alltypestiny where year=2009 and month=1) x
union all
(select * from functional.alltypestiny where year=2009 and month=2)
order by 3 limit 5
---- PLAN
PLAN-ROOT SINK
|
05:TOP-N [LIMIT=5]
|  order by: tinyint_col ASC
|
00:UNION
|  pass-through-operands: 04
|
|--01:UNION
|  |  pass-through-operands: all
|  |
|  |--03:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
04:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 4:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
06:MERGING-EXCHANGE [UNPARTITIONED]
|  order by: tinyint_col ASC
|  limit: 5
|
05:TOP-N [LIMIT=5]
|  order by: tinyint_col ASC
|
00:UNION
|  pass-through-operands: 04
|
|--01:UNION
|  |  pass-through-operands: all
|  |
|  |--03:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
04:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// UNION DISTINCT in subquery
select x.* from
  (select * from functional.alltypestiny where year=2009 and month=1
   union distinct
   select * from functional.alltypestiny where year=2009 and month=1) x
union distinct
(select * from functional.alltypestiny where year=2009 and month=2)
order by 3 limit 3
---- PLAN
PLAN-ROOT SINK
|
07:TOP-N [LIMIT=3]
|  order by: tinyint_col ASC
|
06:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: 05
|
|--04:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  01:UNION
|  |  pass-through-operands: all
|  |
|  |--03:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
05:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- SCANRANGELOCATIONS
NODE 2:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 5:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=2/090201.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
12:MERGING-EXCHANGE [UNPARTITIONED]
|  order by: tinyint_col ASC
|  limit: 3
|
07:TOP-N [LIMIT=3]
|  order by: tinyint_col ASC
|
11:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
10:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|
06:AGGREGATE [STREAMING]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: 05
|
|--09:AGGREGATE [FINALIZE]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  08:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|  |
|  04:AGGREGATE [STREAMING]
|  |  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|  |
|  01:UNION
|  |  pass-through-operands: all
|  |
|  |--03:SCAN HDFS [functional.alltypestiny]
|  |     partitions=1/4 files=1 size=115B
|  |
|  02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
05:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// UNION ALL in subquery with a WHERE condition in the outer select.
select x.* from
  (select int_col, bool_col, count(*) as count_col
   from functional.alltypestiny where year=2009 and month=1 group by 1, 2
   union all
   select int_col, bool_col, count(*) as count_col
   from functional.alltypestiny where year=2009 and month=1 group by 1, 2) x
where x.int_col < 5 and x.bool_col = false
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--04:AGGREGATE [FINALIZE]
|  |  output: count(*)
|  |  group by: int_col, bool_col
|  |
|  03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|     predicates: functional.alltypestiny.int_col < 5, functional.alltypestiny.bool_col = FALSE
|
02:AGGREGATE [FINALIZE]
|  output: count(*)
|  group by: int_col, bool_col
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
   predicates: functional.alltypestiny.int_col < 5, functional.alltypestiny.bool_col = FALSE
---- SCANRANGELOCATIONS
NODE 1:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
NODE 3:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypestiny/year=2009/month=1/090101.txt 0:115
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
09:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  pass-through-operands: all
|
|--08:AGGREGATE [FINALIZE]
|  |  output: count:merge(*)
|  |  group by: int_col, bool_col
|  |
|  07:EXCHANGE [HASH(int_col,bool_col)]
|  |
|  04:AGGREGATE [STREAMING]
|  |  output: count(*)
|  |  group by: int_col, bool_col
|  |
|  03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|     predicates: functional.alltypestiny.int_col < 5, functional.alltypestiny.bool_col = FALSE
|
06:AGGREGATE [FINALIZE]
|  output: count:merge(*)
|  group by: int_col, bool_col
|
05:EXCHANGE [HASH(int_col,bool_col)]
|
02:AGGREGATE [STREAMING]
|  output: count(*)
|  group by: int_col, bool_col
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
   predicates: functional.alltypestiny.int_col < 5, functional.alltypestiny.bool_col = FALSE
====
// UNION ALL with only constant selects
select 1, 'a', NULL, 10.f
union all
select 2, 'b', NULL, 20.f
union all
select 3, 'c', NULL, 30.f
---- PLAN
PLAN-ROOT SINK
|
00:UNION
   constant-operands=3
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
00:UNION
   constant-operands=3
====
// UNION DISTINCT with only constant selects
select 1, 'a', NULL, 10.0f
union distinct
select 2, 'b', NULL, 20.0f
union distinct
select 3, 'c', NULL, 30.0f
---- PLAN
PLAN-ROOT SINK
|
01:AGGREGATE [FINALIZE]
|  group by: 1, 'a', null, f
|
00:UNION
   constant-operands=3
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
01:AGGREGATE [FINALIZE]
|  group by: 1, 'a', null, f
|
00:UNION
   constant-operands=3
====
// UNION ALL/DISTINCT with mixed constant selects and non-constant selects
select 1, 'a', NULL, 10.f
union all
select int_col, string_col, bool_col, float_col from functional.alltypestiny
union distinct
select 3, 'c', NULL, 30.f
union all
select int_col, string_col, bool_col, float_col from functional.alltypestiny
---- PLAN
PLAN-ROOT SINK
|
03:UNION
|  pass-through-operands: all
|
|--02:AGGREGATE [FINALIZE]
|  |  group by: 1, 'a', null, f
|  |
|  00:UNION
|  |  constant-operands=2
|  |  pass-through-operands: all
|  |
|  01:SCAN HDFS [functional.alltypestiny]
|     partitions=4/4 files=4 size=460B
|
04:SCAN HDFS [functional.alltypestiny]
   partitions=4/4 files=4 size=460B
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
07:EXCHANGE [UNPARTITIONED]
|
03:UNION
|  pass-through-operands: all
|
|--06:AGGREGATE [FINALIZE]
|  |  group by: 1, 'a', null, f
|  |
|  05:EXCHANGE [HASH(1,'a',null,f)]
|  |
|  02:AGGREGATE [STREAMING]
|  |  group by: 1, 'a', null, f
|  |
|  00:UNION
|  |  constant-operands=2
|  |  pass-through-operands: all
|  |
|  01:SCAN HDFS [functional.alltypestiny]
|     partitions=4/4 files=4 size=460B
|
04:SCAN HDFS [functional.alltypestiny]
   partitions=4/4 files=4 size=460B
====
// UNION ALL/DISTINCT with mixed constant selects and non-constant selects and nested unions
(select 500
 union all
 (select int_col from functional.alltypestiny where year=2009 and month=2
  order by 1 limit 3
  union all
  select 500)
)
union distinct
select int_col from functional.alltypestiny where year=2009 and month=1
union all
select 503
---- PLAN
PLAN-ROOT SINK
|
05:UNION
|  constant-operands=1
|  pass-through-operands: all
|
04:AGGREGATE [FINALIZE]
|  group by: 500
|
00:UNION
|  constant-operands=2
|  pass-through-operands: 02
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
02:TOP-N [LIMIT=3]
|  order by: int_col ASC
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
10:EXCHANGE [UNPARTITIONED]
|
05:UNION
|  constant-operands=1
|  pass-through-operands: all
|
09:AGGREGATE [FINALIZE]
|  group by: 500
|
08:EXCHANGE [HASH(500)]
|
04:AGGREGATE [STREAMING]
|  group by: 500
|
00:UNION
|  constant-operands=2
|  pass-through-operands: 07
|
|--03:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|
07:EXCHANGE [RANDOM]
|
06:MERGING-EXCHANGE [UNPARTITIONED]
|  order by: int_col ASC
|  limit: 3
|
02:TOP-N [LIMIT=3]
|  order by: int_col ASC
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
====
// UNION ALL with only values statements
values(1, 'a', NULL, 10.f)
union all
values(2, 'b', NULL, 20.f)
union all
values(3, 'c', NULL, 30.f)
---- PLAN
PLAN-ROOT SINK
|
00:UNION
   constant-operands=3
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
00:UNION
   constant-operands=3
====
// UNION DISTINCT with only values statements
values(1, 'a', NULL, 10.f)
union distinct
values(2, 'b', NULL, 20.f)
union distinct
values(3, 'c', NULL, 30.f)
---- PLAN
PLAN-ROOT SINK
|
01:AGGREGATE [FINALIZE]
|  group by: 1, 'a', null, f
|
00:UNION
   constant-operands=3
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
01:AGGREGATE [FINALIZE]
|  group by: 1, 'a', null, f
|
00:UNION
   constant-operands=3
====
// UNION ALL/DISTINCT with mixed values statements and non-constant selects
values(1, 'a', NULL, 10.f)
union all
select int_col, string_col, bool_col, float_col from functional.alltypestiny
union distinct
values(3, 'c', NULL, 30.f)
union all
select int_col, string_col, bool_col, float_col from functional.alltypessmall
---- PLAN
PLAN-ROOT SINK
|
03:UNION
|  pass-through-operands: all
|
|--02:AGGREGATE [FINALIZE]
|  |  group by: 1, 'a', null, f
|  |
|  00:UNION
|  |  constant-operands=2
|  |  pass-through-operands: all
|  |
|  01:SCAN HDFS [functional.alltypestiny]
|     partitions=4/4 files=4 size=460B
|
04:SCAN HDFS [functional.alltypessmall]
   partitions=4/4 files=4 size=6.32KB
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
07:EXCHANGE [UNPARTITIONED]
|
03:UNION
|  pass-through-operands: all
|
|--06:AGGREGATE [FINALIZE]
|  |  group by: 1, 'a', null, f
|  |
|  05:EXCHANGE [HASH(1,'a',null,f)]
|  |
|  02:AGGREGATE [STREAMING]
|  |  group by: 1, 'a', null, f
|  |
|  00:UNION
|  |  constant-operands=2
|  |  pass-through-operands: all
|  |
|  01:SCAN HDFS [functional.alltypestiny]
|     partitions=4/4 files=4 size=460B
|
04:SCAN HDFS [functional.alltypessmall]
   partitions=4/4 files=4 size=6.32KB
====
# all union output slots are being materialized even though none is referenced by
# the enclosing scope
select count(*) from (
  select id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col,
      double_col, date_string_col, string_col, timestamp_col, year, month
    from functional.alltypes
  union distinct
  select 0,true,0,0,0,0,cast(0 as float),0,'01/01/09','0',
      cast('2009-01-01 00:00:00' as timestamp),2009,1
  union distinct
  select id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col,
      double_col, date_string_col, string_col, timestamp_col, year, month
    from functional.alltypes
  union distinct
  select 1,false,1,1,1,10,cast(1.1 as float),10.1,'01/01/09','1',
      cast('2009-01-01 00:01:00' as timestamp),2009,1
  union distinct
  select 2,true,2,2,2,20,cast(2.2 as float),20.2,'01/01/09','2',
      cast('2009-01-01 00:02:00.10' as timestamp),2009,1
) x
---- PLAN
PLAN-ROOT SINK
|
04:AGGREGATE [FINALIZE]
|  output: count(*)
|
03:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  constant-operands=3
|  pass-through-operands: all
|
|--02:SCAN HDFS [functional.alltypes]
|     partitions=24/24 files=24 size=478.45KB
|
01:SCAN HDFS [functional.alltypes]
   partitions=24/24 files=24 size=478.45KB
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
08:AGGREGATE [FINALIZE]
|  output: count:merge(*)
|
07:EXCHANGE [UNPARTITIONED]
|
04:AGGREGATE
|  output: count(*)
|
06:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
05:EXCHANGE [HASH(id,bool_col,tinyint_col,smallint_col,int_col,bigint_col,float_col,double_col,date_string_col,string_col,timestamp_col,year,month)]
|
03:AGGREGATE [STREAMING]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  constant-operands=3
|  pass-through-operands: all
|
|--02:SCAN HDFS [functional.alltypes]
|     partitions=24/24 files=24 size=478.45KB
|
01:SCAN HDFS [functional.alltypes]
   partitions=24/24 files=24 size=478.45KB
====
# UNION ALL in subquery with a WHERE condition in the outer select;
# Where clause conjuncts are used as scan predicates and for partition pruning.
select x.int_col, x.bool_col, x.month from
  (select * from functional.alltypestiny where year=2009
   union all
   select * from functional.alltypestiny where year=2009) x
where x.int_col < 5 and x.bool_col = false and x.month = 1
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|     predicates: functional.alltypestiny.int_col < 5, functional.alltypestiny.bool_col = FALSE
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
   predicates: functional.alltypestiny.int_col < 5, functional.alltypestiny.bool_col = FALSE
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
03:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  pass-through-operands: all
|
|--02:SCAN HDFS [functional.alltypestiny]
|     partitions=1/4 files=1 size=115B
|     predicates: functional.alltypestiny.int_col < 5, functional.alltypestiny.bool_col = FALSE
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=1/4 files=1 size=115B
   predicates: functional.alltypestiny.int_col < 5, functional.alltypestiny.bool_col = FALSE
====
# Regression test for IMPALA-888. Tests proper materialization of slots in
# the presence of conjuncts that become constant for union operands.
select 1 from
  (select 1 a, 2 b, int_col c, bigint_col d from functional.alltypestiny
   union all
   select tinyint_col, int_col, smallint_col, bigint_col from functional.alltypes
   union all
   select 1, tinyint_col, 3, bigint_col from functional.alltypessmall) t
where a + b < 100 and c > 20 and d > 50
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|
|--02:SCAN HDFS [functional.alltypes]
|     partitions=24/24 files=24 size=478.45KB
|     predicates: functional.alltypes.bigint_col > 50, functional.alltypes.smallint_col > 20, functional.alltypes.tinyint_col + functional.alltypes.int_col < 100
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=4/4 files=4 size=460B
   predicates: functional.alltypestiny.bigint_col > 50, functional.alltypestiny.int_col > 20
====
# Test union where all operands are dropped because of constant conjuncts.
select * from
  (select 1 a, 2 b
   union all
   select 3, 4
   union all
   select 10, 20) t
where a > b
---- PLAN
PLAN-ROOT SINK
|
00:UNION
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
00:UNION
====
# Test union merging only partitioned inputs.
select id, bigint_col from functional.alltypestiny
union all
select sum(int_col), bigint_col from functional.alltypes
  where year=2009 and month=2
  group by bigint_col
union all
select a.id, a.bigint_col
  from functional.alltypestiny a inner join functional.alltypestiny b
  on (a.id = b.id)
union all
select 1000, 2000
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  constant-operands=1
|
|--06:HASH JOIN [INNER JOIN]
|  |  hash predicates: a.id = b.id
|  |  runtime filters: RF000 <- b.id
|  |
|  |--05:SCAN HDFS [functional.alltypestiny b]
|  |     partitions=4/4 files=4 size=460B
|  |
|  04:SCAN HDFS [functional.alltypestiny a]
|     partitions=4/4 files=4 size=460B
|     runtime filters: RF000 -> a.id
|
|--03:AGGREGATE [FINALIZE]
|  |  output: sum(int_col)
|  |  group by: bigint_col
|  |
|  02:SCAN HDFS [functional.alltypes]
|     partitions=1/24 files=1 size=18.12KB
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=4/4 files=4 size=460B
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
11:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  constant-operands=1
|
|--06:HASH JOIN [INNER JOIN, PARTITIONED]
|  |  hash predicates: a.id = b.id
|  |  runtime filters: RF000 <- b.id
|  |
|  |--10:EXCHANGE [HASH(b.id)]
|  |  |
|  |  05:SCAN HDFS [functional.alltypestiny b]
|  |     partitions=4/4 files=4 size=460B
|  |
|  09:EXCHANGE [HASH(a.id)]
|  |
|  04:SCAN HDFS [functional.alltypestiny a]
|     partitions=4/4 files=4 size=460B
|     runtime filters: RF000 -> a.id
|
|--08:AGGREGATE [FINALIZE]
|  |  output: sum:merge(int_col)
|  |  group by: bigint_col
|  |
|  07:EXCHANGE [HASH(bigint_col)]
|  |
|  03:AGGREGATE [STREAMING]
|  |  output: sum(int_col)
|  |  group by: bigint_col
|  |
|  02:SCAN HDFS [functional.alltypes]
|     partitions=1/24 files=1 size=18.12KB
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=4/4 files=4 size=460B
====
# Test union merging only unpartitioned inputs.
select count(id), sum(bigint_col) from functional.alltypes
union all
select id, bigint_col from functional.alltypessmall order by id limit 10
union all
select 1000, 2000
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  constant-operands=1
|
|--04:TOP-N [LIMIT=10]
|  |  order by: id ASC
|  |
|  03:SCAN HDFS [functional.alltypessmall]
|     partitions=4/4 files=4 size=6.32KB
|
02:AGGREGATE [FINALIZE]
|  output: count(id), sum(bigint_col)
|
01:SCAN HDFS [functional.alltypes]
   partitions=24/24 files=24 size=478.45KB
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
00:UNION
|  constant-operands=1
|
|--07:MERGING-EXCHANGE [UNPARTITIONED]
|  |  order by: id ASC
|  |  limit: 10
|  |
|  04:TOP-N [LIMIT=10]
|  |  order by: id ASC
|  |
|  03:SCAN HDFS [functional.alltypessmall]
|     partitions=4/4 files=4 size=6.32KB
|
06:AGGREGATE [FINALIZE]
|  output: count:merge(id), sum:merge(bigint_col)
|
05:EXCHANGE [UNPARTITIONED]
|
02:AGGREGATE
|  output: count(id), sum(bigint_col)
|
01:SCAN HDFS [functional.alltypes]
   partitions=24/24 files=24 size=478.45KB
====
# Test union merging mixed unpartitioned and partitioned inputs.
select count(id), sum(bigint_col) from functional.alltypes
union all
select id, bigint_col from functional.alltypessmall order by id limit 10
union all
select id, bigint_col from functional.alltypestiny
union all
select sum(int_col), bigint_col from functional.alltypes
  where year=2009 and month=2
  group by bigint_col
union all
select a.id, a.bigint_col
  from functional.alltypestiny a inner join functional.alltypestiny b
  on (a.id = b.id)
union all
select 1000, 2000
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  constant-operands=1
|
|--10:HASH JOIN [INNER JOIN]
|  |  hash predicates: a.id = b.id
|  |  runtime filters: RF000 <- b.id
|  |
|  |--09:SCAN HDFS [functional.alltypestiny b]
|  |     partitions=4/4 files=4 size=460B
|  |
|  08:SCAN HDFS [functional.alltypestiny a]
|     partitions=4/4 files=4 size=460B
|     runtime filters: RF000 -> a.id
|
|--07:AGGREGATE [FINALIZE]
|  |  output: sum(int_col)
|  |  group by: bigint_col
|  |
|  06:SCAN HDFS [functional.alltypes]
|     partitions=1/24 files=1 size=18.12KB
|
|--05:SCAN HDFS [functional.alltypestiny]
|     partitions=4/4 files=4 size=460B
|
|--04:TOP-N [LIMIT=10]
|  |  order by: id ASC
|  |
|  03:SCAN HDFS [functional.alltypessmall]
|     partitions=4/4 files=4 size=6.32KB
|
02:AGGREGATE [FINALIZE]
|  output: count(id), sum(bigint_col)
|
01:SCAN HDFS [functional.alltypes]
   partitions=24/24 files=24 size=478.45KB
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK
|
20:EXCHANGE [UNPARTITIONED]
|
00:UNION
|  constant-operands=1
|
|--10:HASH JOIN [INNER JOIN, PARTITIONED]
|  |  hash predicates: a.id = b.id
|  |  runtime filters: RF000 <- b.id
|  |
|  |--17:EXCHANGE [HASH(b.id)]
|  |  |
|  |  09:SCAN HDFS [functional.alltypestiny b]
|  |     partitions=4/4 files=4 size=460B
|  |
|  16:EXCHANGE [HASH(a.id)]
|  |
|  08:SCAN HDFS [functional.alltypestiny a]
|     partitions=4/4 files=4 size=460B
|     runtime filters: RF000 -> a.id
|
|--15:AGGREGATE [FINALIZE]
|  |  output: sum:merge(int_col)
|  |  group by: bigint_col
|  |
|  14:EXCHANGE [HASH(bigint_col)]
|  |
|  07:AGGREGATE [STREAMING]
|  |  output: sum(int_col)
|  |  group by: bigint_col
|  |
|  06:SCAN HDFS [functional.alltypes]
|     partitions=1/24 files=1 size=18.12KB
|
|--05:SCAN HDFS [functional.alltypestiny]
|     partitions=4/4 files=4 size=460B
|
|--19:EXCHANGE [RANDOM]
|  |
|  13:MERGING-EXCHANGE [UNPARTITIONED]
|  |  order by: id ASC
|  |  limit: 10
|  |
|  04:TOP-N [LIMIT=10]
|  |  order by: id ASC
|  |
|  03:SCAN HDFS [functional.alltypessmall]
|     partitions=4/4 files=4 size=6.32KB
|
18:EXCHANGE [RANDOM]
|
12:AGGREGATE [FINALIZE]
|  output: count:merge(id), sum:merge(bigint_col)
|
11:EXCHANGE [UNPARTITIONED]
|
02:AGGREGATE
|  output: count(id), sum(bigint_col)
|
01:SCAN HDFS [functional.alltypes]
   partitions=24/24 files=24 size=478.45KB
====
# IMPALA-3450: limits on union nodes are reflected in cardinality estimates. The test for
# this is embedded in PlannerTestBase.java and is not visible in these plans, as they only
# have explain_level=1
select * from tpch.lineitem UNION ALL (select * from tpch.lineitem) LIMIT 1
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|  limit: 1
|
|--02:SCAN HDFS [tpch.lineitem]
|     partitions=1/1 files=1 size=718.94MB
|
01:SCAN HDFS [tpch.lineitem]
   partitions=1/1 files=1 size=718.94MB
====
select l_orderkey from tpch.lineitem UNION DISTINCT (select l_orderkey from tpch.lineitem) LIMIT 1
---- PLAN
PLAN-ROOT SINK
|
03:AGGREGATE [FINALIZE]
|  group by: l_orderkey
|  limit: 1
|
00:UNION
|  pass-through-operands: all
|
|--02:SCAN HDFS [tpch.lineitem]
|     partitions=1/1 files=1 size=718.94MB
|
01:SCAN HDFS [tpch.lineitem]
   partitions=1/1 files=1 size=718.94MB
====
# IMPALA-3678: Predicates migrated into a union operand should be placed into
# a SelectNode if that union operand has an order by + limit.
select * from
  ((select * from functional.alltypes)
    union all
   (select * from functional.alltypes order by id)
    union all
   (select * from functional.alltypessmall order by id limit 10)
    union all
   (select * from functional.alltypestiny order by id limit 20 offset 10)) v
where v.id < 10 and v.int_col > 20
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--08:SELECT
|  |  predicates: id < 10, int_col > 20
|  |
|  07:TOP-N [LIMIT=20 OFFSET=10]
|  |  order by: id ASC
|  |
|  06:SCAN HDFS [functional.alltypestiny]
|     partitions=4/4 files=4 size=460B
|
|--05:SELECT
|  |  predicates: id < 10, int_col > 20
|  |
|  04:TOP-N [LIMIT=10]
|  |  order by: id ASC
|  |
|  03:SCAN HDFS [functional.alltypessmall]
|     partitions=4/4 files=4 size=6.32KB
|
|--02:SCAN HDFS [functional.alltypes]
|     partitions=24/24 files=24 size=478.45KB
|     predicates: functional.alltypes.id < 10, functional.alltypes.int_col > 20
|
01:SCAN HDFS [functional.alltypes]
   partitions=24/24 files=24 size=478.45KB
   predicates: functional.alltypes.id < 10, functional.alltypes.int_col > 20
====
# IMPALA-3678: Same as above but with union distinct.
select * from
  ((select * from functional.alltypes)
    union distinct
   (select * from functional.alltypes order by id)
    union distinct
   (select * from functional.alltypessmall order by id limit 10)
    union distinct
   (select * from functional.alltypestiny order by id limit 20 offset 10)) v
where v.id < 10 and v.int_col > 20
---- PLAN
PLAN-ROOT SINK
|
09:AGGREGATE [FINALIZE]
|  group by: id, bool_col, tinyint_col, smallint_col, int_col, bigint_col, float_col, double_col, date_string_col, string_col, timestamp_col, year, month
|
00:UNION
|  pass-through-operands: all
|
|--08:SELECT
|  |  predicates: id < 10, int_col > 20
|  |
|  07:TOP-N [LIMIT=20 OFFSET=10]
|  |  order by: id ASC
|  |
|  06:SCAN HDFS [functional.alltypestiny]
|     partitions=4/4 files=4 size=460B
|
|--05:SELECT
|  |  predicates: id < 10, int_col > 20
|  |
|  04:TOP-N [LIMIT=10]
|  |  order by: id ASC
|  |
|  03:SCAN HDFS [functional.alltypessmall]
|     partitions=4/4 files=4 size=6.32KB
|
|--02:SCAN HDFS [functional.alltypes]
|     partitions=24/24 files=24 size=478.45KB
|     predicates: functional.alltypes.id < 10, functional.alltypes.int_col > 20
|
01:SCAN HDFS [functional.alltypes]
   partitions=24/24 files=24 size=478.45KB
   predicates: functional.alltypes.id < 10, functional.alltypes.int_col > 20
====
# IMPALA-3678: Both union operands produce rows with non-nullable slots which can be
# passed through.
select kudu_idx from functional_kudu.alltypesagg_idx limit 5
union all
select count(*) from functional.alltypestiny;
---- PLAN
PLAN-ROOT SINK
|
00:UNION
|  pass-through-operands: all
|
|--03:AGGREGATE [FINALIZE]
|  |  output: count(*)
|  |
|  02:SCAN HDFS [functional.alltypestiny]
|     partitions=4/4 files=4 size=460B
|
01:SCAN KUDU [functional_kudu.alltypesagg_idx]
   limit: 5
====
# IMPALA-3678: The Union operands that contain a join should not be passed through,
# because the resulting row contains 2 tuples, instead of one. However, a semi join
# outputs a row with only 1 tuple, so it should be passed through.
select bigint_col from functional.alltypestiny
union
select t1.bigint_col from functional.alltypestiny t1 left semi join
  functional.alltypes t2 on t1.bigint_col = t2.bigint_col
union
select t1.bigint_col from functional.alltypestiny t1 left join
  functional.alltypes t2 on t1.bigint_col = t2.bigint_col
union
select t1.bigint_col from functional.alltypestiny t1 inner join
  functional.alltypes t2 on t1.bigint_col = t2.bigint_col
---- PLAN
PLAN-ROOT SINK
|
11:AGGREGATE [FINALIZE]
|  group by: bigint_col
|
00:UNION
|  pass-through-operands: 01,04
|
|--10:HASH JOIN [INNER JOIN]
|  |  hash predicates: t2.bigint_col = t1.bigint_col
|  |  runtime filters: RF002 <- t1.bigint_col
|  |
|  |--08:SCAN HDFS [functional.alltypestiny t1]
|  |     partitions=4/4 files=4 size=460B
|  |
|  09:SCAN HDFS [functional.alltypes t2]
|     partitions=24/24 files=24 size=478.45KB
|     runtime filters: RF002 -> t2.bigint_col
|
|--07:HASH JOIN [RIGHT OUTER JOIN]
|  |  hash predicates: t2.bigint_col = t1.bigint_col
|  |  runtime filters: RF001 <- t1.bigint_col
|  |
|  |--05:SCAN HDFS [functional.alltypestiny t1]
|  |     partitions=4/4 files=4 size=460B
|  |
|  06:SCAN HDFS [functional.alltypes t2]
|     partitions=24/24 files=24 size=478.45KB
|     runtime filters: RF001 -> t2.bigint_col
|
|--04:HASH JOIN [RIGHT SEMI JOIN]
|  |  hash predicates: t2.bigint_col = t1.bigint_col
|  |  runtime filters: RF000 <- t1.bigint_col
|  |
|  |--02:SCAN HDFS [functional.alltypestiny t1]
|  |     partitions=4/4 files=4 size=460B
|  |
|  03:SCAN HDFS [functional.alltypes t2]
|     partitions=24/24 files=24 size=478.45KB
|     runtime filters: RF000 -> t2.bigint_col
|
01:SCAN HDFS [functional.alltypestiny]
   partitions=4/4 files=4 size=460B
====
# IMPALA-3678: union in a subplan - passthrough should be disabled.
select count(c.c_custkey), count(v.tot_price)
from tpch_nested_parquet.customer c, (
  select sum(o_totalprice) tot_price from c.c_orders
  union
  select sum(o_totalprice) tot_price from c.c_orders) v;
---- PLAN
PLAN-ROOT SINK
|
10:AGGREGATE [FINALIZE]
|  output: count(c.c_custkey), count(tot_price)
|
01:SUBPLAN
|
|--09:NESTED LOOP JOIN [CROSS JOIN]
|  |
|  |--02:SINGULAR ROW SRC
|  |
|  08:AGGREGATE [FINALIZE]
|  |  group by: tot_price
|  |
|  03:UNION
|  |
|  |--07:AGGREGATE [FINALIZE]
|  |  |  output: sum(o_totalprice)
|  |  |
|  |  06:UNNEST [c.c_orders]
|  |
|  05:AGGREGATE [FINALIZE]
|  |  output: sum(o_totalprice)
|  |
|  04:UNNEST [c.c_orders]
|
00:SCAN HDFS [tpch_nested_parquet.customer c]
   partitions=1/1 files=4 size=292.36MB
====
